!function t(e,n,s){function a(i,o){if(!n[i]){if(!e[i]){var u="function"==typeof require&&require;if(!o&&u)return u(i,!0);if(r)return r(i,!0);var c=new Error("Cannot find module '"+i+"'");throw c.code="MODULE_NOT_FOUND",c}var l=n[i]={exports:{}};e[i][0].call(l.exports,function(t){var n=e[i][1][t];return a(n?n:t)},l,l.exports,t,e,n,s)}return n[i].exports}for(var r="function"==typeof require&&require,i=0;i<s.length;i++)a(s[i]);return a}({"/Users/lucasmf/git/evaStatusService/static/client-app/js/components/header.js":[function(t,e){Navbar=ReactBootstrap.Navbar,Nav=ReactBootstrap.Nav,NavItem=ReactBootstrap.NavItem,Button=ReactBootstrap.Button,Header=React.createClass({displayName:"Header",render:function(){return React.createElement(Navbar,null,React.createElement(Nav,null,React.createElement(Button,{bsStyle:"danger navbar-btn"},"Logout")))}}),e.exports=Header},{}],"/Users/lucasmf/git/evaStatusService/static/client-app/js/eva_status/index.js":[function(t){window.Request=t("superagent"),window.moment=t("moment"),window.Table=ReactBootstrap.Table,window.Button=ReactBootstrap.Button,window.Header=t("../components/header"),Actions=Reflux.createActions({load:{children:["completed","failed"]},onTimeRangeChange:{},setTimeRange:{}}),Actions.load.listen(function(){Request.get(evaStatusContentUrl,function(t){var e=JSON.parse(t.text);$.each(e,function(t,e){$.each(e.lessons,function(t,e){e[1]=1e3*e[1]})}),Actions.load.completed(e)})}),EVA_STATUS_TABLE=React.createClass({displayName:"EVA_STATUS_TABLE",mixins:[Reflux.listenTo(Actions.load.completed,"onLoadCompleted"),Reflux.listenTo(Actions.setTimeRange,"onTimeRangeChange"),Reflux.listenTo(Actions.onTimeRangeChange,"onTimeRangeChange")],getInitialState:function(){var t=function(t,e,n,s){this.id=t,this.label=e,this.min=n,this.max=s};t.prototype.isLevel=function(t){return t.lessons.length>=this.min&&t.lessons.length<=this.max?!0:!1};var e=function(t,e,n){this.id=t,this.label=e,this.isDepartFunction=n};return e.prototype.isDepart=function(t){return this.isDepartFunction(t)},{loaded:!1,levels:[new t(1,"連結中 (0 ~ 0課)",0,0),new t(2,"入門 (1 ~ 5課)",1,5),new t(3,"初級 (6 ~ 15課)",6,15),new t(4,"中級 (16 ~ 25課)",16,25),new t(5,"高級 (26 ~ 30課)",26,30)],departs:[new e(1,"SS 男",function(t){return"國高中部"==t.depart&&t.gender}),new e(2,"SS 女",function(t){return"國高中部"==t.depart&&!t.gender}),new e(3,"Campus 男",function(t){return"大學部"==t.depart&&t.gender}),new e(4,"Campus 女",function(t){return"大學部"==t.depart&&!t.gender}),new e(5,"青年部 男",function(t){return"青年部"==t.depart&&t.gender}),new e(6,"青年部 女",function(t){return"青年部"==t.depart&&!t.gender}),new e(7,"長年部 男",function(t){return"長年部"==t.depart})],evaStatusList:[]}},onLoadCompleted:function(t){t.sort(function(t,e){return t.order-e.order}),this.setState({evaStatusList:t,loaded:!0})},onTimeRangeChange:function(t){this.setState({timeRange:t})},getLessonsBeforePeriod:function(t){var e=0;return this.state.timeRange.start&&this.state.timeRange.end&&t.lessons&&$.each(t.lessons,function(t,n){moment(n[1]).isBefore(this.state.timeRange.start)&&(e+=1)}.bind(this)),e},getLessonsAfterPeriod:function(t){var e=0;return this.state.timeRange.start&&this.state.timeRange.end&&t.lessons&&$.each(t.lessons,function(t,n){moment(n[1]).isAfter(this.state.timeRange.end)&&(e+=1)}.bind(this)),e},getLessonsBetweenPeriod:function(t){var e=0;return this.state.timeRange.start&&this.state.timeRange.end&&t.lessons&&$.each(t.lessons,function(t,n){(moment(n[1]).isSame(this.state.timeRange.end)||moment(n[1]).isSame(this.state.timeRange.start)||moment(n[1]).isAfter(this.state.timeRange.start)&&moment(n[1]).isBefore(this.state.timeRange.end))&&(e+=1)}.bind(this)),e},getListeningEvaStatusBetweenPeriod:function(t){var e=0;return $.each(t,function(t,n){this.getLessonsBetweenPeriod(n)>0&&(e+=1)}.bind(this)),e},groupBy:function(t,e){var n={};return t.forEach(function(t){var s=JSON.stringify(e(t));n[s]=n[s]||[],n[s].push(t)}),n},render:function(){return console.log(this.state.loaded),React.createElement("div",null,React.createElement("h3",{style:{display:this.state.loaded?"none":"block",textAlign:"center"}},"讀取中，請稍候..."),React.createElement("div",{style:{display:this.state.loaded?"block":"none"}},React.createElement(Table,{striped:!0,bordered:!0,condensed:!0,hover:!0},React.createElement("thead",null,React.createElement("tr",null,React.createElement("th",null),this.state.levels.map(function(t){return React.createElement("th",null,t.label)}),React.createElement("th",null))),React.createElement("tbody",null,React.createElement("tr",null,React.createElement("td",null),this.state.levels.map(function(t){var e=$.grep(this.state.evaStatusList,function(e){return t.isLevel(e)});return React.createElement("td",null,e.length,"(",this.getListeningEvaStatusBetweenPeriod(e),")")}.bind(this)),React.createElement("td",null,this.state.evaStatusList.length,"(",this.getListeningEvaStatusBetweenPeriod(this.state.evaStatusList),")")),this.state.departs.map(function(t){var e=$.grep(this.state.evaStatusList,function(e){return t.isDepart(e)});return React.createElement("tr",null,React.createElement("td",null,t.label),this.state.levels.map(function(e){var n=$.grep(this.state.evaStatusList,function(n){return t.isDepart(n)&&e.isLevel(n)});return React.createElement("td",null,React.createElement("div",null,n.length,"(",this.getListeningEvaStatusBetweenPeriod(n),")"),n.map(function(t){var e={};return e=t.gender?{color:"blue"}:{color:"red"},React.createElement("div",null,React.createElement("a",{style:e},t.name,"(",this.getLessonsBeforePeriod(t)," + ",this.getLessonsBetweenPeriod(t)," + ",this.getLessonsAfterPeriod(t),")"))}.bind(this)))}.bind(this)),React.createElement("td",null,e.length,"(",this.getListeningEvaStatusBetweenPeriod(e),")"))}.bind(this))))))}});var e=React.createClass({displayName:"DateField",mixins:[Reflux.listenTo(Actions.setTimeRange,"onTimeRangeChange")],getInitialState:function(){return{startYear:"",startMonth:"",startDay:"",endYear:"",endMonth:"",endDay:""}},submit:function(){var t=parseInt($(this.refs.startYear.getDOMNode()).val()),e=parseInt($(this.refs.startMonth.getDOMNode()).val()),n=parseInt($(this.refs.startDay.getDOMNode()).val()),s=moment().year(t).month(e-1).date(n).format("YYYY/MM/DD"),a=parseInt($(this.refs.endYear.getDOMNode()).val()),r=parseInt($(this.refs.endMonth.getDOMNode()).val()),i=parseInt($(this.refs.endDay.getDOMNode()).val()),o=moment().year(a).month(r-1).date(i).format("YYYY/MM/DD");console.log(s),console.log(o),Actions.onTimeRangeChange({start:s,end:o})},onTimeRangeChange:function(t){var e=t.start.split("/");this.setState({startYear:""+parseInt(e[0])}),this.setState({startMonth:""+parseInt(e[1])}),this.setState({startDay:""+parseInt(e[2])});var n=t.end.split("/");this.setState({endYear:""+parseInt(n[0])}),this.setState({endMonth:""+parseInt(n[1])}),this.setState({endDay:""+parseInt(n[2])})},onChange:function(t){Object.is(t.target,this.refs.startYear.getDOMNode())?this.setState({startYear:t.target.value}):Object.is(t.target,this.refs.startMonth.getDOMNode())?this.setState({startMonth:t.target.value}):Object.is(t.target,this.refs.startDay.getDOMNode())?this.setState({startDay:t.target.value}):Object.is(t.target,this.refs.endYear.getDOMNode())?this.setState({endYear:t.target.value}):Object.is(t.target,this.refs.endMonth.getDOMNode())?this.setState({endMonth:t.target.value}):Object.is(t.target,this.refs.endDay.getDOMNode())&&this.setState({endDay:t.target.value})},render:function(){var t={display:"inline-block",marginRight:"20px",marginBottom:"20px"};return React.createElement("div",null,React.createElement("span",{style:t},React.createElement("label",null,"開始"),React.createElement("input",{type:"number",min:"2012",max:"2020",ref:"startYear",value:this.state.startYear,onChange:this.onChange}),"年",React.createElement("input",{type:"number",min:"1",max:"12",ref:"startMonth",value:this.state.startMonth,onChange:this.onChange}),"月",React.createElement("input",{type:"number",min:"1",max:"31",ref:"startDay",value:this.state.startDay,onChange:this.onChange}),"日"),React.createElement("span",{style:t},React.createElement("label",null,"結束"),React.createElement("input",{type:"number",min:"2012",max:"2020",ref:"endYear",value:this.state.endYear,onChange:this.onChange}),"年",React.createElement("input",{type:"number",min:"1",max:"12",ref:"endMonth",value:this.state.endMonth,onChange:this.onChange}),"月",React.createElement("input",{type:"number",min:"1",max:"31",ref:"endDay",value:this.state.endDay,onChange:this.onChange}),"日"),React.createElement(Button,{bsStyle:"primary",onClick:this.submit},"送出"))}}),n=React.createClass({displayName:"LogoutBtn",onClick:function(){window.location.href="/logout"},render:function(){return React.createElement(Button,{bsStyle:"danger",style:{"float":"right"},onClick:this.onClick},"Logout")}});React.render(React.createElement("div",{style:{padding:"20px"}},React.createElement(n,null),React.createElement(e,null),React.createElement(EVA_STATUS_TABLE,null)),document.getElementById("content")),Actions.load(),Actions.setTimeRange({start:moment().add(-7,"days").format("YYYY/MM/DD"),end:moment().format("YYYY/MM/DD")})},{"../components/header":"/Users/lucasmf/git/evaStatusService/static/client-app/js/components/header.js",moment:"/Users/lucasmf/git/evaStatusService/static/node_modules/moment/moment.js",superagent:"/Users/lucasmf/git/evaStatusService/static/node_modules/superagent/lib/client.js"}],"/Users/lucasmf/git/evaStatusService/static/node_modules/moment/moment.js":[function(t,e){(function(n){(function(s){function a(t,e,n){switch(arguments.length){case 2:return null!=t?t:e;case 3:return null!=t?t:null!=e?e:n;default:throw new Error("Implement me")}}function r(t,e){return Re.call(t,e)}function i(){return{empty:!1,unusedTokens:[],unusedInput:[],overflow:-2,charsLeftOver:0,nullInput:!1,invalidMonth:null,invalidFormat:!1,userInvalidated:!1,iso:!1}}function o(t){Ye.suppressDeprecationWarnings===!1&&"undefined"!=typeof console&&console.warn&&console.warn("Deprecation warning: "+t)}function u(t,e){var n=!0;return y(function(){return n&&(o(t),n=!1),e.apply(this,arguments)},e)}function c(t,e){Mn[t]||(o(e),Mn[t]=!0)}function l(t,e){return function(n){return w(t.call(this,n),e)}}function h(t,e){return function(n){return this.localeData().ordinal(t.call(this,n),e)}}function d(t,e){var n,s,a=12*(e.year()-t.year())+(e.month()-t.month()),r=t.clone().add(a,"months");return 0>e-r?(n=t.clone().add(a-1,"months"),s=(e-r)/(r-n)):(n=t.clone().add(a+1,"months"),s=(e-r)/(n-r)),-(a+s)}function f(t,e,n){var s;return null==n?e:null!=t.meridiemHour?t.meridiemHour(e,n):null!=t.isPM?(s=t.isPM(n),s&&12>e&&(e+=12),s||12!==e||(e=0),e):e}function m(){}function p(t,e){e!==!1&&P(t),g(this,t),this._d=new Date(+t._d),Yn===!1&&(Yn=!0,Ye.updateOffset(this),Yn=!1)}function _(t){var e=C(t),n=e.year||0,s=e.quarter||0,a=e.month||0,r=e.week||0,i=e.day||0,o=e.hour||0,u=e.minute||0,c=e.second||0,l=e.millisecond||0;this._milliseconds=+l+1e3*c+6e4*u+36e5*o,this._days=+i+7*r,this._months=+a+3*s+12*n,this._data={},this._locale=Ye.localeData(),this._bubble()}function y(t,e){for(var n in e)r(e,n)&&(t[n]=e[n]);return r(e,"toString")&&(t.toString=e.toString),r(e,"valueOf")&&(t.valueOf=e.valueOf),t}function g(t,e){var n,s,a;if("undefined"!=typeof e._isAMomentObject&&(t._isAMomentObject=e._isAMomentObject),"undefined"!=typeof e._i&&(t._i=e._i),"undefined"!=typeof e._f&&(t._f=e._f),"undefined"!=typeof e._l&&(t._l=e._l),"undefined"!=typeof e._strict&&(t._strict=e._strict),"undefined"!=typeof e._tzm&&(t._tzm=e._tzm),"undefined"!=typeof e._isUTC&&(t._isUTC=e._isUTC),"undefined"!=typeof e._offset&&(t._offset=e._offset),"undefined"!=typeof e._pf&&(t._pf=e._pf),"undefined"!=typeof e._locale&&(t._locale=e._locale),Ie.length>0)for(n in Ie)s=Ie[n],a=e[s],"undefined"!=typeof a&&(t[s]=a);return t}function v(t){return 0>t?Math.ceil(t):Math.floor(t)}function w(t,e,n){for(var s=""+Math.abs(t),a=t>=0;s.length<e;)s="0"+s;return(a?n?"+":"":"-")+s}function D(t,e){var n={milliseconds:0,months:0};return n.months=e.month()-t.month()+12*(e.year()-t.year()),t.clone().add(n.months,"M").isAfter(e)&&--n.months,n.milliseconds=+e-+t.clone().add(n.months,"M"),n}function M(t,e){var n;return e=W(e,t),t.isBefore(e)?n=D(t,e):(n=D(e,t),n.milliseconds=-n.milliseconds,n.months=-n.months),n}function b(t,e){return function(n,s){var a,r;return null===s||isNaN(+s)||(c(e,"moment()."+e+"(period, number) is deprecated. Please use moment()."+e+"(number, period)."),r=n,n=s,s=r),n="string"==typeof n?+n:n,a=Ye.duration(n,s),Y(this,a,t),this}}function Y(t,e,n,s){var a=e._milliseconds,r=e._days,i=e._months;s=null==s?!0:s,a&&t._d.setTime(+t._d+a*n),r&&ge(t,"Date",ye(t,"Date")+r*n),i&&_e(t,ye(t,"Month")+i*n),s&&Ye.updateOffset(t,r||i)}function S(t){return"[object Array]"===Object.prototype.toString.call(t)}function k(t){return"[object Date]"===Object.prototype.toString.call(t)||t instanceof Date}function T(t,e,n){var s,a=Math.min(t.length,e.length),r=Math.abs(t.length-e.length),i=0;for(s=0;a>s;s++)(n&&t[s]!==e[s]||!n&&E(t[s])!==E(e[s]))&&i++;return i+r}function O(t){if(t){var e=t.toLowerCase().replace(/(.)s$/,"$1");t=pn[t]||_n[e]||e}return t}function C(t){var e,n,s={};for(n in t)r(t,n)&&(e=O(n),e&&(s[e]=t[n]));return s}function R(t){var e,n;if(0===t.indexOf("week"))e=7,n="day";else{if(0!==t.indexOf("month"))return;e=12,n="month"}Ye[t]=function(a,r){var i,o,u=Ye._locale[t],c=[];if("number"==typeof a&&(r=a,a=s),o=function(t){var e=Ye().utc().set(n,t);return u.call(Ye._locale,e,a||"")},null!=r)return o(r);for(i=0;e>i;i++)c.push(o(i));return c}}function E(t){var e=+t,n=0;return 0!==e&&isFinite(e)&&(n=e>=0?Math.floor(e):Math.ceil(e)),n}function x(t,e){return new Date(Date.UTC(t,e+1,0)).getUTCDate()}function L(t,e,n){return de(Ye([t,11,31+e-n]),e,n).week}function U(t){return A(t)?366:365}function A(t){return t%4===0&&t%100!==0||t%400===0}function P(t){var e;t._a&&-2===t._pf.overflow&&(e=t._a[xe]<0||t._a[xe]>11?xe:t._a[Le]<1||t._a[Le]>x(t._a[Ee],t._a[xe])?Le:t._a[Ue]<0||t._a[Ue]>24||24===t._a[Ue]&&(0!==t._a[Ae]||0!==t._a[Pe]||0!==t._a[He])?Ue:t._a[Ae]<0||t._a[Ae]>59?Ae:t._a[Pe]<0||t._a[Pe]>59?Pe:t._a[He]<0||t._a[He]>999?He:-1,t._pf._overflowDayOfYear&&(Ee>e||e>Le)&&(e=Le),t._pf.overflow=e)}function H(t){return null==t._isValid&&(t._isValid=!isNaN(t._d.getTime())&&t._pf.overflow<0&&!t._pf.empty&&!t._pf.invalidMonth&&!t._pf.nullInput&&!t._pf.invalidFormat&&!t._pf.userInvalidated,t._strict&&(t._isValid=t._isValid&&0===t._pf.charsLeftOver&&0===t._pf.unusedTokens.length&&t._pf.bigHour===s)),t._isValid}function F(t){return t?t.toLowerCase().replace("_","-"):t}function I(t){for(var e,n,s,a,r=0;r<t.length;){for(a=F(t[r]).split("-"),e=a.length,n=F(t[r+1]),n=n?n.split("-"):null;e>0;){if(s=G(a.slice(0,e).join("-")))return s;if(n&&n.length>=e&&T(a,n,!0)>=e-1)break;e--}r++}return null}function G(e){var n=null;if(!Fe[e]&&Ge)try{n=Ye.locale(),t("./locale/"+e),Ye.locale(n)}catch(s){}return Fe[e]}function W(t,e){var n,s;return e._isUTC?(n=e.clone(),s=(Ye.isMoment(t)||k(t)?+t:+Ye(t))-+n,n._d.setTime(+n._d+s),Ye.updateOffset(n,!1),n):Ye(t).local()}function j(t){return t.match(/\[[\s\S]/)?t.replace(/^\[|\]$/g,""):t.replace(/\\/g,"")}function N(t){var e,n,s=t.match(Be);for(e=0,n=s.length;n>e;e++)s[e]=Dn[s[e]]?Dn[s[e]]:j(s[e]);return function(a){var r="";for(e=0;n>e;e++)r+=s[e]instanceof Function?s[e].call(a,t):s[e];return r}}function B(t,e){return t.isValid()?(e=q(e,t.localeData()),yn[e]||(yn[e]=N(e)),yn[e](t)):t.localeData().invalidDate()}function q(t,e){function n(t){return e.longDateFormat(t)||t}var s=5;for(qe.lastIndex=0;s>=0&&qe.test(t);)t=t.replace(qe,n),qe.lastIndex=0,s-=1;return t}function z(t,e){var n,s=e._strict;switch(t){case"Q":return nn;case"DDDD":return an;case"YYYY":case"GGGG":case"gggg":return s?rn:Ze;case"Y":case"G":case"g":return un;case"YYYYYY":case"YYYYY":case"GGGGG":case"ggggg":return s?on:Xe;case"S":if(s)return nn;case"SS":if(s)return sn;case"SSS":if(s)return an;case"DDD":return $e;case"MMM":case"MMMM":case"dd":case"ddd":case"dddd":return Je;case"a":case"A":return e._locale._meridiemParse;case"x":return tn;case"X":return en;case"Z":case"ZZ":return Qe;case"T":return Ke;case"SSSS":return Ve;case"MM":case"DD":case"YY":case"GG":case"gg":case"HH":case"hh":case"mm":case"ss":case"ww":case"WW":return s?sn:ze;case"M":case"D":case"d":case"H":case"h":case"m":case"s":case"w":case"W":case"e":case"E":return ze;case"Do":return s?e._locale._ordinalParse:e._locale._ordinalParseLenient;default:return n=new RegExp(ee(te(t.replace("\\","")),"i"))}}function $(t){t=t||"";var e=t.match(Qe)||[],n=e[e.length-1]||[],s=(n+"").match(fn)||["-",0,0],a=+(60*s[1])+E(s[2]);return"+"===s[0]?a:-a}function Z(t,e,n){var s,a=n._a;switch(t){case"Q":null!=e&&(a[xe]=3*(E(e)-1));break;case"M":case"MM":null!=e&&(a[xe]=E(e)-1);break;case"MMM":case"MMMM":s=n._locale.monthsParse(e,t,n._strict),null!=s?a[xe]=s:n._pf.invalidMonth=e;break;case"D":case"DD":null!=e&&(a[Le]=E(e));break;case"Do":null!=e&&(a[Le]=E(parseInt(e.match(/\d{1,2}/)[0],10)));break;case"DDD":case"DDDD":null!=e&&(n._dayOfYear=E(e));break;case"YY":a[Ee]=Ye.parseTwoDigitYear(e);break;case"YYYY":case"YYYYY":case"YYYYYY":a[Ee]=E(e);break;case"a":case"A":n._meridiem=e;break;case"h":case"hh":n._pf.bigHour=!0;case"H":case"HH":a[Ue]=E(e);break;case"m":case"mm":a[Ae]=E(e);break;case"s":case"ss":a[Pe]=E(e);break;case"S":case"SS":case"SSS":case"SSSS":a[He]=E(1e3*("0."+e));break;case"x":n._d=new Date(E(e));break;case"X":n._d=new Date(1e3*parseFloat(e));break;case"Z":case"ZZ":n._useUTC=!0,n._tzm=$(e);break;case"dd":case"ddd":case"dddd":s=n._locale.weekdaysParse(e),null!=s?(n._w=n._w||{},n._w.d=s):n._pf.invalidWeekday=e;break;case"w":case"ww":case"W":case"WW":case"d":case"e":case"E":t=t.substr(0,1);case"gggg":case"GGGG":case"GGGGG":t=t.substr(0,2),e&&(n._w=n._w||{},n._w[t]=E(e));break;case"gg":case"GG":n._w=n._w||{},n._w[t]=Ye.parseTwoDigitYear(e)}}function X(t){var e,n,s,r,i,o,u;e=t._w,null!=e.GG||null!=e.W||null!=e.E?(i=1,o=4,n=a(e.GG,t._a[Ee],de(Ye(),1,4).year),s=a(e.W,1),r=a(e.E,1)):(i=t._locale._week.dow,o=t._locale._week.doy,n=a(e.gg,t._a[Ee],de(Ye(),i,o).year),s=a(e.w,1),null!=e.d?(r=e.d,i>r&&++s):r=null!=e.e?e.e+i:i),u=fe(n,s,r,o,i),t._a[Ee]=u.year,t._dayOfYear=u.dayOfYear}function V(t){var e,n,s,r,i=[];if(!t._d){for(s=Q(t),t._w&&null==t._a[Le]&&null==t._a[xe]&&X(t),t._dayOfYear&&(r=a(t._a[Ee],s[Ee]),t._dayOfYear>U(r)&&(t._pf._overflowDayOfYear=!0),n=ue(r,0,t._dayOfYear),t._a[xe]=n.getUTCMonth(),t._a[Le]=n.getUTCDate()),e=0;3>e&&null==t._a[e];++e)t._a[e]=i[e]=s[e];for(;7>e;e++)t._a[e]=i[e]=null==t._a[e]?2===e?1:0:t._a[e];24===t._a[Ue]&&0===t._a[Ae]&&0===t._a[Pe]&&0===t._a[He]&&(t._nextDay=!0,t._a[Ue]=0),t._d=(t._useUTC?ue:oe).apply(null,i),null!=t._tzm&&t._d.setUTCMinutes(t._d.getUTCMinutes()-t._tzm),t._nextDay&&(t._a[Ue]=24)}}function J(t){var e;t._d||(e=C(t._i),t._a=[e.year,e.month,e.day||e.date,e.hour,e.minute,e.second,e.millisecond],V(t))}function Q(t){var e=new Date;return t._useUTC?[e.getUTCFullYear(),e.getUTCMonth(),e.getUTCDate()]:[e.getFullYear(),e.getMonth(),e.getDate()]}function K(t){if(t._f===Ye.ISO_8601)return void se(t);t._a=[],t._pf.empty=!0;var e,n,a,r,i,o=""+t._i,u=o.length,c=0;for(a=q(t._f,t._locale).match(Be)||[],e=0;e<a.length;e++)r=a[e],n=(o.match(z(r,t))||[])[0],n&&(i=o.substr(0,o.indexOf(n)),i.length>0&&t._pf.unusedInput.push(i),o=o.slice(o.indexOf(n)+n.length),c+=n.length),Dn[r]?(n?t._pf.empty=!1:t._pf.unusedTokens.push(r),Z(r,n,t)):t._strict&&!n&&t._pf.unusedTokens.push(r);t._pf.charsLeftOver=u-c,o.length>0&&t._pf.unusedInput.push(o),t._pf.bigHour===!0&&t._a[Ue]<=12&&(t._pf.bigHour=s),t._a[Ue]=f(t._locale,t._a[Ue],t._meridiem),V(t),P(t)}function te(t){return t.replace(/\\(\[)|\\(\])|\[([^\]\[]*)\]|\\(.)/g,function(t,e,n,s,a){return e||n||s||a})}function ee(t){return t.replace(/[-\/\\^$*+?.()|[\]{}]/g,"\\$&")}function ne(t){var e,n,s,a,r;if(0===t._f.length)return t._pf.invalidFormat=!0,void(t._d=new Date(0/0));for(a=0;a<t._f.length;a++)r=0,e=g({},t),null!=t._useUTC&&(e._useUTC=t._useUTC),e._pf=i(),e._f=t._f[a],K(e),H(e)&&(r+=e._pf.charsLeftOver,r+=10*e._pf.unusedTokens.length,e._pf.score=r,(null==s||s>r)&&(s=r,n=e));y(t,n||e)}function se(t){var e,n,s=t._i,a=cn.exec(s);if(a){for(t._pf.iso=!0,e=0,n=hn.length;n>e;e++)if(hn[e][1].exec(s)){t._f=hn[e][0]+(a[6]||" ");break}for(e=0,n=dn.length;n>e;e++)if(dn[e][1].exec(s)){t._f+=dn[e][0];break}s.match(Qe)&&(t._f+="Z"),K(t)}else t._isValid=!1}function ae(t){se(t),t._isValid===!1&&(delete t._isValid,Ye.createFromInputFallback(t))}function re(t,e){var n,s=[];for(n=0;n<t.length;++n)s.push(e(t[n],n));return s}function ie(t){var e,n=t._i;n===s?t._d=new Date:k(n)?t._d=new Date(+n):null!==(e=We.exec(n))?t._d=new Date(+e[1]):"string"==typeof n?ae(t):S(n)?(t._a=re(n.slice(0),function(t){return parseInt(t,10)}),V(t)):"object"==typeof n?J(t):"number"==typeof n?t._d=new Date(n):Ye.createFromInputFallback(t)}function oe(t,e,n,s,a,r,i){var o=new Date(t,e,n,s,a,r,i);return 1970>t&&o.setFullYear(t),o}function ue(t){var e=new Date(Date.UTC.apply(null,arguments));return 1970>t&&e.setUTCFullYear(t),e}function ce(t,e){if("string"==typeof t)if(isNaN(t)){if(t=e.weekdaysParse(t),"number"!=typeof t)return null}else t=parseInt(t,10);return t}function le(t,e,n,s,a){return a.relativeTime(e||1,!!n,t,s)}function he(t,e,n){var s=Ye.duration(t).abs(),a=Ce(s.as("s")),r=Ce(s.as("m")),i=Ce(s.as("h")),o=Ce(s.as("d")),u=Ce(s.as("M")),c=Ce(s.as("y")),l=a<gn.s&&["s",a]||1===r&&["m"]||r<gn.m&&["mm",r]||1===i&&["h"]||i<gn.h&&["hh",i]||1===o&&["d"]||o<gn.d&&["dd",o]||1===u&&["M"]||u<gn.M&&["MM",u]||1===c&&["y"]||["yy",c];return l[2]=e,l[3]=+t>0,l[4]=n,le.apply({},l)}function de(t,e,n){var s,a=n-e,r=n-t.day();return r>a&&(r-=7),a-7>r&&(r+=7),s=Ye(t).add(r,"d"),{week:Math.ceil(s.dayOfYear()/7),year:s.year()}}function fe(t,e,n,s,a){var r,i,o=ue(t,0,1).getUTCDay();return o=0===o?7:o,n=null!=n?n:a,r=a-o+(o>s?7:0)-(a>o?7:0),i=7*(e-1)+(n-a)+r+1,{year:i>0?t:t-1,dayOfYear:i>0?i:U(t-1)+i}}function me(t){var e,n=t._i,a=t._f;return t._locale=t._locale||Ye.localeData(t._l),null===n||a===s&&""===n?Ye.invalid({nullInput:!0}):("string"==typeof n&&(t._i=n=t._locale.preparse(n)),Ye.isMoment(n)?new p(n,!0):(a?S(a)?ne(t):K(t):ie(t),e=new p(t),e._nextDay&&(e.add(1,"d"),e._nextDay=s),e))}function pe(t,e){var n,s;if(1===e.length&&S(e[0])&&(e=e[0]),!e.length)return Ye();for(n=e[0],s=1;s<e.length;++s)e[s][t](n)&&(n=e[s]);return n}function _e(t,e){var n;return"string"==typeof e&&(e=t.localeData().monthsParse(e),"number"!=typeof e)?t:(n=Math.min(t.date(),x(t.year(),e)),t._d["set"+(t._isUTC?"UTC":"")+"Month"](e,n),t)}function ye(t,e){return t._d["get"+(t._isUTC?"UTC":"")+e]()}function ge(t,e,n){return"Month"===e?_e(t,n):t._d["set"+(t._isUTC?"UTC":"")+e](n)}function ve(t,e){return function(n){return null!=n?(ge(this,t,n),Ye.updateOffset(this,e),this):ye(this,t)}}function we(t){return 400*t/146097}function De(t){return 146097*t/400}function Me(t){Ye.duration.fn[t]=function(){return this._data[t]}}function be(t){"undefined"==typeof ender&&(Se=Oe.moment,Oe.moment=t?u("Accessing Moment through the global scope is deprecated, and will be removed in an upcoming release.",Ye):Ye)}for(var Ye,Se,ke,Te="2.9.0",Oe="undefined"==typeof n||"undefined"!=typeof window&&window!==n.window?this:n,Ce=Math.round,Re=Object.prototype.hasOwnProperty,Ee=0,xe=1,Le=2,Ue=3,Ae=4,Pe=5,He=6,Fe={},Ie=[],Ge="undefined"!=typeof e&&e&&e.exports,We=/^\/?Date\((\-?\d+)/i,je=/(\-)?(?:(\d*)\.)?(\d+)\:(\d+)(?:\:(\d+)\.?(\d{3})?)?/,Ne=/^(-)?P(?:(?:([0-9,.]*)Y)?(?:([0-9,.]*)M)?(?:([0-9,.]*)D)?(?:T(?:([0-9,.]*)H)?(?:([0-9,.]*)M)?(?:([0-9,.]*)S)?)?|([0-9,.]*)W)$/,Be=/(\[[^\[]*\])|(\\)?(Mo|MM?M?M?|Do|DDDo|DD?D?D?|ddd?d?|do?|w[o|w]?|W[o|W]?|Q|YYYYYY|YYYYY|YYYY|YY|gg(ggg?)?|GG(GGG?)?|e|E|a|A|hh?|HH?|mm?|ss?|S{1,4}|x|X|zz?|ZZ?|.)/g,qe=/(\[[^\[]*\])|(\\)?(LTS|LT|LL?L?L?|l{1,4})/g,ze=/\d\d?/,$e=/\d{1,3}/,Ze=/\d{1,4}/,Xe=/[+\-]?\d{1,6}/,Ve=/\d+/,Je=/[0-9]*['a-z\u00A0-\u05FF\u0700-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF]+|[\u0600-\u06FF\/]+(\s*?[\u0600-\u06FF]+){1,2}/i,Qe=/Z|[\+\-]\d\d:?\d\d/gi,Ke=/T/i,tn=/[\+\-]?\d+/,en=/[\+\-]?\d+(\.\d{1,3})?/,nn=/\d/,sn=/\d\d/,an=/\d{3}/,rn=/\d{4}/,on=/[+-]?\d{6}/,un=/[+-]?\d+/,cn=/^\s*(?:[+-]\d{6}|\d{4})-(?:(\d\d-\d\d)|(W\d\d$)|(W\d\d-\d)|(\d\d\d))((T| )(\d\d(:\d\d(:\d\d(\.\d+)?)?)?)?([\+\-]\d\d(?::?\d\d)?|\s*Z)?)?$/,ln="YYYY-MM-DDTHH:mm:ssZ",hn=[["YYYYYY-MM-DD",/[+-]\d{6}-\d{2}-\d{2}/],["YYYY-MM-DD",/\d{4}-\d{2}-\d{2}/],["GGGG-[W]WW-E",/\d{4}-W\d{2}-\d/],["GGGG-[W]WW",/\d{4}-W\d{2}/],["YYYY-DDD",/\d{4}-\d{3}/]],dn=[["HH:mm:ss.SSSS",/(T| )\d\d:\d\d:\d\d\.\d+/],["HH:mm:ss",/(T| )\d\d:\d\d:\d\d/],["HH:mm",/(T| )\d\d:\d\d/],["HH",/(T| )\d\d/]],fn=/([\+\-]|\d\d)/gi,mn=("Date|Hours|Minutes|Seconds|Milliseconds".split("|"),{Milliseconds:1,Seconds:1e3,Minutes:6e4,Hours:36e5,Days:864e5,Months:2592e6,Years:31536e6}),pn={ms:"millisecond",s:"second",m:"minute",h:"hour",d:"day",D:"date",w:"week",W:"isoWeek",M:"month",Q:"quarter",y:"year",DDD:"dayOfYear",e:"weekday",E:"isoWeekday",gg:"weekYear",GG:"isoWeekYear"},_n={dayofyear:"dayOfYear",isoweekday:"isoWeekday",isoweek:"isoWeek",weekyear:"weekYear",isoweekyear:"isoWeekYear"},yn={},gn={s:45,m:45,h:22,d:26,M:11},vn="DDD w W M D d".split(" "),wn="M D H h m s w W".split(" "),Dn={M:function(){return this.month()+1},MMM:function(t){return this.localeData().monthsShort(this,t)},MMMM:function(t){return this.localeData().months(this,t)},D:function(){return this.date()},DDD:function(){return this.dayOfYear()},d:function(){return this.day()},dd:function(t){return this.localeData().weekdaysMin(this,t)},ddd:function(t){return this.localeData().weekdaysShort(this,t)},dddd:function(t){return this.localeData().weekdays(this,t)},w:function(){return this.week()},W:function(){return this.isoWeek()},YY:function(){return w(this.year()%100,2)},YYYY:function(){return w(this.year(),4)},YYYYY:function(){return w(this.year(),5)},YYYYYY:function(){var t=this.year(),e=t>=0?"+":"-";return e+w(Math.abs(t),6)},gg:function(){return w(this.weekYear()%100,2)},gggg:function(){return w(this.weekYear(),4)},ggggg:function(){return w(this.weekYear(),5)},GG:function(){return w(this.isoWeekYear()%100,2)},GGGG:function(){return w(this.isoWeekYear(),4)},GGGGG:function(){return w(this.isoWeekYear(),5)},e:function(){return this.weekday()},E:function(){return this.isoWeekday()},a:function(){return this.localeData().meridiem(this.hours(),this.minutes(),!0)},A:function(){return this.localeData().meridiem(this.hours(),this.minutes(),!1)},H:function(){return this.hours()},h:function(){return this.hours()%12||12},m:function(){return this.minutes()},s:function(){return this.seconds()},S:function(){return E(this.milliseconds()/100)},SS:function(){return w(E(this.milliseconds()/10),2)},SSS:function(){return w(this.milliseconds(),3)},SSSS:function(){return w(this.milliseconds(),3)},Z:function(){var t=this.utcOffset(),e="+";return 0>t&&(t=-t,e="-"),e+w(E(t/60),2)+":"+w(E(t)%60,2)},ZZ:function(){var t=this.utcOffset(),e="+";return 0>t&&(t=-t,e="-"),e+w(E(t/60),2)+w(E(t)%60,2)},z:function(){return this.zoneAbbr()},zz:function(){return this.zoneName()},x:function(){return this.valueOf()},X:function(){return this.unix()},Q:function(){return this.quarter()}},Mn={},bn=["months","monthsShort","weekdays","weekdaysShort","weekdaysMin"],Yn=!1;vn.length;)ke=vn.pop(),Dn[ke+"o"]=h(Dn[ke],ke);for(;wn.length;)ke=wn.pop(),Dn[ke+ke]=l(Dn[ke],2);Dn.DDDD=l(Dn.DDD,3),y(m.prototype,{set:function(t){var e,n;for(n in t)e=t[n],"function"==typeof e?this[n]=e:this["_"+n]=e;this._ordinalParseLenient=new RegExp(this._ordinalParse.source+"|"+/\d{1,2}/.source)},_months:"January_February_March_April_May_June_July_August_September_October_November_December".split("_"),months:function(t){return this._months[t.month()]},_monthsShort:"Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec".split("_"),monthsShort:function(t){return this._monthsShort[t.month()]},monthsParse:function(t,e,n){var s,a,r;for(this._monthsParse||(this._monthsParse=[],this._longMonthsParse=[],this._shortMonthsParse=[]),s=0;12>s;s++){if(a=Ye.utc([2e3,s]),n&&!this._longMonthsParse[s]&&(this._longMonthsParse[s]=new RegExp("^"+this.months(a,"").replace(".","")+"$","i"),this._shortMonthsParse[s]=new RegExp("^"+this.monthsShort(a,"").replace(".","")+"$","i")),n||this._monthsParse[s]||(r="^"+this.months(a,"")+"|^"+this.monthsShort(a,""),this._monthsParse[s]=new RegExp(r.replace(".",""),"i")),n&&"MMMM"===e&&this._longMonthsParse[s].test(t))return s;if(n&&"MMM"===e&&this._shortMonthsParse[s].test(t))return s;if(!n&&this._monthsParse[s].test(t))return s}},_weekdays:"Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday".split("_"),weekdays:function(t){return this._weekdays[t.day()]},_weekdaysShort:"Sun_Mon_Tue_Wed_Thu_Fri_Sat".split("_"),weekdaysShort:function(t){return this._weekdaysShort[t.day()]},_weekdaysMin:"Su_Mo_Tu_We_Th_Fr_Sa".split("_"),weekdaysMin:function(t){return this._weekdaysMin[t.day()]},weekdaysParse:function(t){var e,n,s;for(this._weekdaysParse||(this._weekdaysParse=[]),e=0;7>e;e++)if(this._weekdaysParse[e]||(n=Ye([2e3,1]).day(e),s="^"+this.weekdays(n,"")+"|^"+this.weekdaysShort(n,"")+"|^"+this.weekdaysMin(n,""),this._weekdaysParse[e]=new RegExp(s.replace(".",""),"i")),this._weekdaysParse[e].test(t))return e},_longDateFormat:{LTS:"h:mm:ss A",LT:"h:mm A",L:"MM/DD/YYYY",LL:"MMMM D, YYYY",LLL:"MMMM D, YYYY LT",LLLL:"dddd, MMMM D, YYYY LT"},longDateFormat:function(t){var e=this._longDateFormat[t];return!e&&this._longDateFormat[t.toUpperCase()]&&(e=this._longDateFormat[t.toUpperCase()].replace(/MMMM|MM|DD|dddd/g,function(t){return t.slice(1)}),this._longDateFormat[t]=e),e},isPM:function(t){return"p"===(t+"").toLowerCase().charAt(0)},_meridiemParse:/[ap]\.?m?\.?/i,meridiem:function(t,e,n){return t>11?n?"pm":"PM":n?"am":"AM"},_calendar:{sameDay:"[Today at] LT",nextDay:"[Tomorrow at] LT",nextWeek:"dddd [at] LT",lastDay:"[Yesterday at] LT",lastWeek:"[Last] dddd [at] LT",sameElse:"L"},calendar:function(t,e,n){var s=this._calendar[t];return"function"==typeof s?s.apply(e,[n]):s},_relativeTime:{future:"in %s",past:"%s ago",s:"a few seconds",m:"a minute",mm:"%d minutes",h:"an hour",hh:"%d hours",d:"a day",dd:"%d days",M:"a month",MM:"%d months",y:"a year",yy:"%d years"},relativeTime:function(t,e,n,s){var a=this._relativeTime[n];return"function"==typeof a?a(t,e,n,s):a.replace(/%d/i,t)},pastFuture:function(t,e){var n=this._relativeTime[t>0?"future":"past"];return"function"==typeof n?n(e):n.replace(/%s/i,e)},ordinal:function(t){return this._ordinal.replace("%d",t)},_ordinal:"%d",_ordinalParse:/\d{1,2}/,preparse:function(t){return t},postformat:function(t){return t},week:function(t){return de(t,this._week.dow,this._week.doy).week},_week:{dow:0,doy:6},firstDayOfWeek:function(){return this._week.dow},firstDayOfYear:function(){return this._week.doy},_invalidDate:"Invalid date",invalidDate:function(){return this._invalidDate}}),Ye=function(t,e,n,a){var r;return"boolean"==typeof n&&(a=n,n=s),r={},r._isAMomentObject=!0,r._i=t,r._f=e,r._l=n,r._strict=a,r._isUTC=!1,r._pf=i(),me(r)},Ye.suppressDeprecationWarnings=!1,Ye.createFromInputFallback=u("moment construction falls back to js Date. This is discouraged and will be removed in upcoming major release. Please refer to https://github.com/moment/moment/issues/1407 for more info.",function(t){t._d=new Date(t._i+(t._useUTC?" UTC":""))}),Ye.min=function(){var t=[].slice.call(arguments,0);return pe("isBefore",t)},Ye.max=function(){var t=[].slice.call(arguments,0);return pe("isAfter",t)},Ye.utc=function(t,e,n,a){var r;return"boolean"==typeof n&&(a=n,n=s),r={},r._isAMomentObject=!0,r._useUTC=!0,r._isUTC=!0,r._l=n,r._i=t,r._f=e,r._strict=a,r._pf=i(),me(r).utc()},Ye.unix=function(t){return Ye(1e3*t)},Ye.duration=function(t,e){var n,s,a,i,o=t,u=null;return Ye.isDuration(t)?o={ms:t._milliseconds,d:t._days,M:t._months}:"number"==typeof t?(o={},e?o[e]=t:o.milliseconds=t):(u=je.exec(t))?(n="-"===u[1]?-1:1,o={y:0,d:E(u[Le])*n,h:E(u[Ue])*n,m:E(u[Ae])*n,s:E(u[Pe])*n,ms:E(u[He])*n}):(u=Ne.exec(t))?(n="-"===u[1]?-1:1,a=function(t){var e=t&&parseFloat(t.replace(",","."));return(isNaN(e)?0:e)*n},o={y:a(u[2]),M:a(u[3]),d:a(u[4]),h:a(u[5]),m:a(u[6]),s:a(u[7]),w:a(u[8])}):null==o?o={}:"object"==typeof o&&("from"in o||"to"in o)&&(i=M(Ye(o.from),Ye(o.to)),o={},o.ms=i.milliseconds,o.M=i.months),s=new _(o),Ye.isDuration(t)&&r(t,"_locale")&&(s._locale=t._locale),s
},Ye.version=Te,Ye.defaultFormat=ln,Ye.ISO_8601=function(){},Ye.momentProperties=Ie,Ye.updateOffset=function(){},Ye.relativeTimeThreshold=function(t,e){return gn[t]===s?!1:e===s?gn[t]:(gn[t]=e,!0)},Ye.lang=u("moment.lang is deprecated. Use moment.locale instead.",function(t,e){return Ye.locale(t,e)}),Ye.locale=function(t,e){var n;return t&&(n="undefined"!=typeof e?Ye.defineLocale(t,e):Ye.localeData(t),n&&(Ye.duration._locale=Ye._locale=n)),Ye._locale._abbr},Ye.defineLocale=function(t,e){return null!==e?(e.abbr=t,Fe[t]||(Fe[t]=new m),Fe[t].set(e),Ye.locale(t),Fe[t]):(delete Fe[t],null)},Ye.langData=u("moment.langData is deprecated. Use moment.localeData instead.",function(t){return Ye.localeData(t)}),Ye.localeData=function(t){var e;if(t&&t._locale&&t._locale._abbr&&(t=t._locale._abbr),!t)return Ye._locale;if(!S(t)){if(e=G(t))return e;t=[t]}return I(t)},Ye.isMoment=function(t){return t instanceof p||null!=t&&r(t,"_isAMomentObject")},Ye.isDuration=function(t){return t instanceof _};for(ke=bn.length-1;ke>=0;--ke)R(bn[ke]);Ye.normalizeUnits=function(t){return O(t)},Ye.invalid=function(t){var e=Ye.utc(0/0);return null!=t?y(e._pf,t):e._pf.userInvalidated=!0,e},Ye.parseZone=function(){return Ye.apply(null,arguments).parseZone()},Ye.parseTwoDigitYear=function(t){return E(t)+(E(t)>68?1900:2e3)},Ye.isDate=k,y(Ye.fn=p.prototype,{clone:function(){return Ye(this)},valueOf:function(){return+this._d-6e4*(this._offset||0)},unix:function(){return Math.floor(+this/1e3)},toString:function(){return this.clone().locale("en").format("ddd MMM DD YYYY HH:mm:ss [GMT]ZZ")},toDate:function(){return this._offset?new Date(+this):this._d},toISOString:function(){var t=Ye(this).utc();return 0<t.year()&&t.year()<=9999?"function"==typeof Date.prototype.toISOString?this.toDate().toISOString():B(t,"YYYY-MM-DD[T]HH:mm:ss.SSS[Z]"):B(t,"YYYYYY-MM-DD[T]HH:mm:ss.SSS[Z]")},toArray:function(){var t=this;return[t.year(),t.month(),t.date(),t.hours(),t.minutes(),t.seconds(),t.milliseconds()]},isValid:function(){return H(this)},isDSTShifted:function(){return this._a?this.isValid()&&T(this._a,(this._isUTC?Ye.utc(this._a):Ye(this._a)).toArray())>0:!1},parsingFlags:function(){return y({},this._pf)},invalidAt:function(){return this._pf.overflow},utc:function(t){return this.utcOffset(0,t)},local:function(t){return this._isUTC&&(this.utcOffset(0,t),this._isUTC=!1,t&&this.subtract(this._dateUtcOffset(),"m")),this},format:function(t){var e=B(this,t||Ye.defaultFormat);return this.localeData().postformat(e)},add:b(1,"add"),subtract:b(-1,"subtract"),diff:function(t,e,n){var s,a,r=W(t,this),i=6e4*(r.utcOffset()-this.utcOffset());return e=O(e),"year"===e||"month"===e||"quarter"===e?(a=d(this,r),"quarter"===e?a/=3:"year"===e&&(a/=12)):(s=this-r,a="second"===e?s/1e3:"minute"===e?s/6e4:"hour"===e?s/36e5:"day"===e?(s-i)/864e5:"week"===e?(s-i)/6048e5:s),n?a:v(a)},from:function(t,e){return Ye.duration({to:this,from:t}).locale(this.locale()).humanize(!e)},fromNow:function(t){return this.from(Ye(),t)},calendar:function(t){var e=t||Ye(),n=W(e,this).startOf("day"),s=this.diff(n,"days",!0),a=-6>s?"sameElse":-1>s?"lastWeek":0>s?"lastDay":1>s?"sameDay":2>s?"nextDay":7>s?"nextWeek":"sameElse";return this.format(this.localeData().calendar(a,this,Ye(e)))},isLeapYear:function(){return A(this.year())},isDST:function(){return this.utcOffset()>this.clone().month(0).utcOffset()||this.utcOffset()>this.clone().month(5).utcOffset()},day:function(t){var e=this._isUTC?this._d.getUTCDay():this._d.getDay();return null!=t?(t=ce(t,this.localeData()),this.add(t-e,"d")):e},month:ve("Month",!0),startOf:function(t){switch(t=O(t)){case"year":this.month(0);case"quarter":case"month":this.date(1);case"week":case"isoWeek":case"day":this.hours(0);case"hour":this.minutes(0);case"minute":this.seconds(0);case"second":this.milliseconds(0)}return"week"===t?this.weekday(0):"isoWeek"===t&&this.isoWeekday(1),"quarter"===t&&this.month(3*Math.floor(this.month()/3)),this},endOf:function(t){return t=O(t),t===s||"millisecond"===t?this:this.startOf(t).add(1,"isoWeek"===t?"week":t).subtract(1,"ms")},isAfter:function(t,e){var n;return e=O("undefined"!=typeof e?e:"millisecond"),"millisecond"===e?(t=Ye.isMoment(t)?t:Ye(t),+this>+t):(n=Ye.isMoment(t)?+t:+Ye(t),n<+this.clone().startOf(e))},isBefore:function(t,e){var n;return e=O("undefined"!=typeof e?e:"millisecond"),"millisecond"===e?(t=Ye.isMoment(t)?t:Ye(t),+t>+this):(n=Ye.isMoment(t)?+t:+Ye(t),+this.clone().endOf(e)<n)},isBetween:function(t,e,n){return this.isAfter(t,n)&&this.isBefore(e,n)},isSame:function(t,e){var n;return e=O(e||"millisecond"),"millisecond"===e?(t=Ye.isMoment(t)?t:Ye(t),+this===+t):(n=+Ye(t),+this.clone().startOf(e)<=n&&n<=+this.clone().endOf(e))},min:u("moment().min is deprecated, use moment.min instead. https://github.com/moment/moment/issues/1548",function(t){return t=Ye.apply(null,arguments),this>t?this:t}),max:u("moment().max is deprecated, use moment.max instead. https://github.com/moment/moment/issues/1548",function(t){return t=Ye.apply(null,arguments),t>this?this:t}),zone:u("moment().zone is deprecated, use moment().utcOffset instead. https://github.com/moment/moment/issues/1779",function(t,e){return null!=t?("string"!=typeof t&&(t=-t),this.utcOffset(t,e),this):-this.utcOffset()}),utcOffset:function(t,e){var n,s=this._offset||0;return null!=t?("string"==typeof t&&(t=$(t)),Math.abs(t)<16&&(t=60*t),!this._isUTC&&e&&(n=this._dateUtcOffset()),this._offset=t,this._isUTC=!0,null!=n&&this.add(n,"m"),s!==t&&(!e||this._changeInProgress?Y(this,Ye.duration(t-s,"m"),1,!1):this._changeInProgress||(this._changeInProgress=!0,Ye.updateOffset(this,!0),this._changeInProgress=null)),this):this._isUTC?s:this._dateUtcOffset()},isLocal:function(){return!this._isUTC},isUtcOffset:function(){return this._isUTC},isUtc:function(){return this._isUTC&&0===this._offset},zoneAbbr:function(){return this._isUTC?"UTC":""},zoneName:function(){return this._isUTC?"Coordinated Universal Time":""},parseZone:function(){return this._tzm?this.utcOffset(this._tzm):"string"==typeof this._i&&this.utcOffset($(this._i)),this},hasAlignedHourOffset:function(t){return t=t?Ye(t).utcOffset():0,(this.utcOffset()-t)%60===0},daysInMonth:function(){return x(this.year(),this.month())},dayOfYear:function(t){var e=Ce((Ye(this).startOf("day")-Ye(this).startOf("year"))/864e5)+1;return null==t?e:this.add(t-e,"d")},quarter:function(t){return null==t?Math.ceil((this.month()+1)/3):this.month(3*(t-1)+this.month()%3)},weekYear:function(t){var e=de(this,this.localeData()._week.dow,this.localeData()._week.doy).year;return null==t?e:this.add(t-e,"y")},isoWeekYear:function(t){var e=de(this,1,4).year;return null==t?e:this.add(t-e,"y")},week:function(t){var e=this.localeData().week(this);return null==t?e:this.add(7*(t-e),"d")},isoWeek:function(t){var e=de(this,1,4).week;return null==t?e:this.add(7*(t-e),"d")},weekday:function(t){var e=(this.day()+7-this.localeData()._week.dow)%7;return null==t?e:this.add(t-e,"d")},isoWeekday:function(t){return null==t?this.day()||7:this.day(this.day()%7?t:t-7)},isoWeeksInYear:function(){return L(this.year(),1,4)},weeksInYear:function(){var t=this.localeData()._week;return L(this.year(),t.dow,t.doy)},get:function(t){return t=O(t),this[t]()},set:function(t,e){var n;if("object"==typeof t)for(n in t)this.set(n,t[n]);else t=O(t),"function"==typeof this[t]&&this[t](e);return this},locale:function(t){var e;return t===s?this._locale._abbr:(e=Ye.localeData(t),null!=e&&(this._locale=e),this)},lang:u("moment().lang() is deprecated. Instead, use moment().localeData() to get the language configuration. Use moment().locale() to change languages.",function(t){return t===s?this.localeData():this.locale(t)}),localeData:function(){return this._locale},_dateUtcOffset:function(){return 15*-Math.round(this._d.getTimezoneOffset()/15)}}),Ye.fn.millisecond=Ye.fn.milliseconds=ve("Milliseconds",!1),Ye.fn.second=Ye.fn.seconds=ve("Seconds",!1),Ye.fn.minute=Ye.fn.minutes=ve("Minutes",!1),Ye.fn.hour=Ye.fn.hours=ve("Hours",!0),Ye.fn.date=ve("Date",!0),Ye.fn.dates=u("dates accessor is deprecated. Use date instead.",ve("Date",!0)),Ye.fn.year=ve("FullYear",!0),Ye.fn.years=u("years accessor is deprecated. Use year instead.",ve("FullYear",!0)),Ye.fn.days=Ye.fn.day,Ye.fn.months=Ye.fn.month,Ye.fn.weeks=Ye.fn.week,Ye.fn.isoWeeks=Ye.fn.isoWeek,Ye.fn.quarters=Ye.fn.quarter,Ye.fn.toJSON=Ye.fn.toISOString,Ye.fn.isUTC=Ye.fn.isUtc,y(Ye.duration.fn=_.prototype,{_bubble:function(){var t,e,n,s=this._milliseconds,a=this._days,r=this._months,i=this._data,o=0;i.milliseconds=s%1e3,t=v(s/1e3),i.seconds=t%60,e=v(t/60),i.minutes=e%60,n=v(e/60),i.hours=n%24,a+=v(n/24),o=v(we(a)),a-=v(De(o)),r+=v(a/30),a%=30,o+=v(r/12),r%=12,i.days=a,i.months=r,i.years=o},abs:function(){return this._milliseconds=Math.abs(this._milliseconds),this._days=Math.abs(this._days),this._months=Math.abs(this._months),this._data.milliseconds=Math.abs(this._data.milliseconds),this._data.seconds=Math.abs(this._data.seconds),this._data.minutes=Math.abs(this._data.minutes),this._data.hours=Math.abs(this._data.hours),this._data.months=Math.abs(this._data.months),this._data.years=Math.abs(this._data.years),this},weeks:function(){return v(this.days()/7)},valueOf:function(){return this._milliseconds+864e5*this._days+this._months%12*2592e6+31536e6*E(this._months/12)},humanize:function(t){var e=he(this,!t,this.localeData());return t&&(e=this.localeData().pastFuture(+this,e)),this.localeData().postformat(e)},add:function(t,e){var n=Ye.duration(t,e);return this._milliseconds+=n._milliseconds,this._days+=n._days,this._months+=n._months,this._bubble(),this},subtract:function(t,e){var n=Ye.duration(t,e);return this._milliseconds-=n._milliseconds,this._days-=n._days,this._months-=n._months,this._bubble(),this},get:function(t){return t=O(t),this[t.toLowerCase()+"s"]()},as:function(t){var e,n;if(t=O(t),"month"===t||"year"===t)return e=this._days+this._milliseconds/864e5,n=this._months+12*we(e),"month"===t?n:n/12;switch(e=this._days+Math.round(De(this._months/12)),t){case"week":return e/7+this._milliseconds/6048e5;case"day":return e+this._milliseconds/864e5;case"hour":return 24*e+this._milliseconds/36e5;case"minute":return 24*e*60+this._milliseconds/6e4;case"second":return 24*e*60*60+this._milliseconds/1e3;case"millisecond":return Math.floor(24*e*60*60*1e3)+this._milliseconds;default:throw new Error("Unknown unit "+t)}},lang:Ye.fn.lang,locale:Ye.fn.locale,toIsoString:u("toIsoString() is deprecated. Please use toISOString() instead (notice the capitals)",function(){return this.toISOString()}),toISOString:function(){var t=Math.abs(this.years()),e=Math.abs(this.months()),n=Math.abs(this.days()),s=Math.abs(this.hours()),a=Math.abs(this.minutes()),r=Math.abs(this.seconds()+this.milliseconds()/1e3);return this.asSeconds()?(this.asSeconds()<0?"-":"")+"P"+(t?t+"Y":"")+(e?e+"M":"")+(n?n+"D":"")+(s||a||r?"T":"")+(s?s+"H":"")+(a?a+"M":"")+(r?r+"S":""):"P0D"},localeData:function(){return this._locale},toJSON:function(){return this.toISOString()}}),Ye.duration.fn.toString=Ye.duration.fn.toISOString;for(ke in mn)r(mn,ke)&&Me(ke.toLowerCase());Ye.duration.fn.asMilliseconds=function(){return this.as("ms")},Ye.duration.fn.asSeconds=function(){return this.as("s")},Ye.duration.fn.asMinutes=function(){return this.as("m")},Ye.duration.fn.asHours=function(){return this.as("h")},Ye.duration.fn.asDays=function(){return this.as("d")},Ye.duration.fn.asWeeks=function(){return this.as("weeks")},Ye.duration.fn.asMonths=function(){return this.as("M")},Ye.duration.fn.asYears=function(){return this.as("y")},Ye.locale("en",{ordinalParse:/\d{1,2}(th|st|nd|rd)/,ordinal:function(t){var e=t%10,n=1===E(t%100/10)?"th":1===e?"st":2===e?"nd":3===e?"rd":"th";return t+n}}),Ge?e.exports=Ye:"function"==typeof define&&define.amd?(define(function(t,e,n){return n.config&&n.config()&&n.config().noGlobal===!0&&(Oe.moment=Se),Ye}),be(!0)):be()}).call(this)}).call(this,"undefined"!=typeof global?global:"undefined"!=typeof self?self:"undefined"!=typeof window?window:{})},{}],"/Users/lucasmf/git/evaStatusService/static/node_modules/superagent/lib/client.js":[function(t,e){function n(){}function s(t){var e={}.toString.call(t);switch(e){case"[object File]":case"[object Blob]":case"[object FormData]":return!0;default:return!1}}function a(){if(_.XMLHttpRequest&&("file:"!=_.location.protocol||!_.ActiveXObject))return new XMLHttpRequest;try{return new ActiveXObject("Microsoft.XMLHTTP")}catch(t){}try{return new ActiveXObject("Msxml2.XMLHTTP.6.0")}catch(t){}try{return new ActiveXObject("Msxml2.XMLHTTP.3.0")}catch(t){}try{return new ActiveXObject("Msxml2.XMLHTTP")}catch(t){}return!1}function r(t){return t===Object(t)}function i(t){if(!r(t))return t;var e=[];for(var n in t)null!=t[n]&&e.push(encodeURIComponent(n)+"="+encodeURIComponent(t[n]));return e.join("&")}function o(t){for(var e,n,s={},a=t.split("&"),r=0,i=a.length;i>r;++r)n=a[r],e=n.split("="),s[decodeURIComponent(e[0])]=decodeURIComponent(e[1]);return s}function u(t){var e,n,s,a,r=t.split(/\r?\n/),i={};r.pop();for(var o=0,u=r.length;u>o;++o)n=r[o],e=n.indexOf(":"),s=n.slice(0,e).toLowerCase(),a=y(n.slice(e+1)),i[s]=a;return i}function c(t){return t.split(/ *; */).shift()}function l(t){return p(t.split(/ *; */),function(t,e){var n=e.split(/ *= */),s=n.shift(),a=n.shift();return s&&a&&(t[s]=a),t},{})}function h(t,e){e=e||{},this.req=t,this.xhr=this.req.xhr,this.text="HEAD"!=this.req.method?this.xhr.responseText:null,this.setStatusProperties(this.xhr.status),this.header=this.headers=u(this.xhr.getAllResponseHeaders()),this.header["content-type"]=this.xhr.getResponseHeader("content-type"),this.setHeaderProperties(this.header),this.body="HEAD"!=this.req.method?this.parseBody(this.text):null}function d(t,e){var n=this;m.call(this),this._query=this._query||[],this.method=t,this.url=e,this.header={},this._header={},this.on("end",function(){var t=null,e=null;try{e=new h(n)}catch(s){t=new Error("Parser is unable to parse the response"),t.parse=!0,t.original=s}n.callback(t,e)})}function f(t,e){return"function"==typeof e?new d("GET",t).end(e):1==arguments.length?new d("GET",t):new d(t,e)}var m=t("emitter"),p=t("reduce"),_="undefined"==typeof window?this:window,y="".trim?function(t){return t.trim()}:function(t){return t.replace(/(^\s*|\s*$)/g,"")};f.serializeObject=i,f.parseString=o,f.types={html:"text/html",json:"application/json",xml:"application/xml",urlencoded:"application/x-www-form-urlencoded",form:"application/x-www-form-urlencoded","form-data":"application/x-www-form-urlencoded"},f.serialize={"application/x-www-form-urlencoded":i,"application/json":JSON.stringify},f.parse={"application/x-www-form-urlencoded":o,"application/json":JSON.parse},h.prototype.get=function(t){return this.header[t.toLowerCase()]},h.prototype.setHeaderProperties=function(){var t=this.header["content-type"]||"";this.type=c(t);var e=l(t);for(var n in e)this[n]=e[n]},h.prototype.parseBody=function(t){var e=f.parse[this.type];return e&&t&&t.length?e(t):null},h.prototype.setStatusProperties=function(t){var e=t/100|0;this.status=t,this.statusType=e,this.info=1==e,this.ok=2==e,this.clientError=4==e,this.serverError=5==e,this.error=4==e||5==e?this.toError():!1,this.accepted=202==t,this.noContent=204==t||1223==t,this.badRequest=400==t,this.unauthorized=401==t,this.notAcceptable=406==t,this.notFound=404==t,this.forbidden=403==t},h.prototype.toError=function(){var t=this.req,e=t.method,n=t.url,s="cannot "+e+" "+n+" ("+this.status+")",a=new Error(s);return a.status=this.status,a.method=e,a.url=n,a},f.Response=h,m(d.prototype),d.prototype.use=function(t){return t(this),this},d.prototype.timeout=function(t){return this._timeout=t,this},d.prototype.clearTimeout=function(){return this._timeout=0,clearTimeout(this._timer),this},d.prototype.abort=function(){return this.aborted?void 0:(this.aborted=!0,this.xhr.abort(),this.clearTimeout(),this.emit("abort"),this)},d.prototype.set=function(t,e){if(r(t)){for(var n in t)this.set(n,t[n]);return this}return this._header[t.toLowerCase()]=e,this.header[t]=e,this},d.prototype.unset=function(t){return delete this._header[t.toLowerCase()],delete this.header[t],this},d.prototype.getHeader=function(t){return this._header[t.toLowerCase()]},d.prototype.type=function(t){return this.set("Content-Type",f.types[t]||t),this},d.prototype.accept=function(t){return this.set("Accept",f.types[t]||t),this},d.prototype.auth=function(t,e){var n=btoa(t+":"+e);return this.set("Authorization","Basic "+n),this},d.prototype.query=function(t){return"string"!=typeof t&&(t=i(t)),t&&this._query.push(t),this},d.prototype.field=function(t,e){return this._formData||(this._formData=new FormData),this._formData.append(t,e),this},d.prototype.attach=function(t,e,n){return this._formData||(this._formData=new FormData),this._formData.append(t,e,n),this},d.prototype.send=function(t){var e=r(t),n=this.getHeader("Content-Type");if(e&&r(this._data))for(var s in t)this._data[s]=t[s];else"string"==typeof t?(n||this.type("form"),n=this.getHeader("Content-Type"),this._data="application/x-www-form-urlencoded"==n?this._data?this._data+"&"+t:t:(this._data||"")+t):this._data=t;return e?(n||this.type("json"),this):this},d.prototype.callback=function(t,e){var n=this._callback;return this.clearTimeout(),2==n.length?n(t,e):t?this.emit("error",t):void n(e)},d.prototype.crossDomainError=function(){var t=new Error("Origin is not allowed by Access-Control-Allow-Origin");t.crossDomain=!0,this.callback(t)},d.prototype.timeoutError=function(){var t=this._timeout,e=new Error("timeout of "+t+"ms exceeded");e.timeout=t,this.callback(e)},d.prototype.withCredentials=function(){return this._withCredentials=!0,this},d.prototype.end=function(t){var e=this,r=this.xhr=a(),i=this._query.join("&"),o=this._timeout,u=this._formData||this._data;if(this._callback=t||n,r.onreadystatechange=function(){return 4==r.readyState?0==r.status?e.aborted?e.timeoutError():e.crossDomainError():void e.emit("end"):void 0},r.upload&&(r.upload.onprogress=function(t){t.percent=t.loaded/t.total*100,e.emit("progress",t)}),o&&!this._timer&&(this._timer=setTimeout(function(){e.abort()},o)),i&&(i=f.serializeObject(i),this.url+=~this.url.indexOf("?")?"&"+i:"?"+i),r.open(this.method,this.url,!0),this._withCredentials&&(r.withCredentials=!0),"GET"!=this.method&&"HEAD"!=this.method&&"string"!=typeof u&&!s(u)){var c=f.serialize[this.getHeader("Content-Type")];c&&(u=c(u))}for(var l in this.header)null!=this.header[l]&&r.setRequestHeader(l,this.header[l]);return this.emit("request",this),r.send(u),this},f.Request=d,f.get=function(t,e,n){var s=f("GET",t);return"function"==typeof e&&(n=e,e=null),e&&s.query(e),n&&s.end(n),s},f.head=function(t,e,n){var s=f("HEAD",t);return"function"==typeof e&&(n=e,e=null),e&&s.send(e),n&&s.end(n),s},f.del=function(t,e){var n=f("DELETE",t);return e&&n.end(e),n},f.patch=function(t,e,n){var s=f("PATCH",t);return"function"==typeof e&&(n=e,e=null),e&&s.send(e),n&&s.end(n),s},f.post=function(t,e,n){var s=f("POST",t);return"function"==typeof e&&(n=e,e=null),e&&s.send(e),n&&s.end(n),s},f.put=function(t,e,n){var s=f("PUT",t);return"function"==typeof e&&(n=e,e=null),e&&s.send(e),n&&s.end(n),s},e.exports=f},{emitter:"/Users/lucasmf/git/evaStatusService/static/node_modules/superagent/node_modules/component-emitter/index.js",reduce:"/Users/lucasmf/git/evaStatusService/static/node_modules/superagent/node_modules/reduce-component/index.js"}],"/Users/lucasmf/git/evaStatusService/static/node_modules/superagent/node_modules/component-emitter/index.js":[function(t,e){function n(t){return t?s(t):void 0}function s(t){for(var e in n.prototype)t[e]=n.prototype[e];return t}e.exports=n,n.prototype.on=n.prototype.addEventListener=function(t,e){return this._callbacks=this._callbacks||{},(this._callbacks[t]=this._callbacks[t]||[]).push(e),this},n.prototype.once=function(t,e){function n(){s.off(t,n),e.apply(this,arguments)}var s=this;return this._callbacks=this._callbacks||{},n.fn=e,this.on(t,n),this},n.prototype.off=n.prototype.removeListener=n.prototype.removeAllListeners=n.prototype.removeEventListener=function(t,e){if(this._callbacks=this._callbacks||{},0==arguments.length)return this._callbacks={},this;var n=this._callbacks[t];if(!n)return this;if(1==arguments.length)return delete this._callbacks[t],this;for(var s,a=0;a<n.length;a++)if(s=n[a],s===e||s.fn===e){n.splice(a,1);break}return this},n.prototype.emit=function(t){this._callbacks=this._callbacks||{};var e=[].slice.call(arguments,1),n=this._callbacks[t];if(n){n=n.slice(0);for(var s=0,a=n.length;a>s;++s)n[s].apply(this,e)}return this},n.prototype.listeners=function(t){return this._callbacks=this._callbacks||{},this._callbacks[t]||[]},n.prototype.hasListeners=function(t){return!!this.listeners(t).length}},{}],"/Users/lucasmf/git/evaStatusService/static/node_modules/superagent/node_modules/reduce-component/index.js":[function(t,e){e.exports=function(t,e,n){for(var s=0,a=t.length,r=3==arguments.length?n:t[s++];a>s;)r=e.call(null,r,t[s],++s,t);return r}},{}]},{},["/Users/lucasmf/git/evaStatusService/static/client-app/js/eva_status/index.js"]);
//# sourceMappingURL=data:application/json;base64,