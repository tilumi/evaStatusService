!function e(t,n,r){function i(a,s){if(!n[a]){if(!t[a]){var c="function"==typeof require&&require;if(!s&&c)return c(a,!0);if(o)return o(a,!0);var l=new Error("Cannot find module '"+a+"'");throw l.code="MODULE_NOT_FOUND",l}var u=n[a]={exports:{}};t[a][0].call(u.exports,function(e){var n=t[a][1][e];return i(n?n:e)},u,u.exports,e,t,n,r)}return n[a].exports}for(var o="function"==typeof require&&require,a=0;a<r.length;a++)i(r[a]);return i}({"/Users/lucasmf/Documents/workspace-sts-3.6.3.SR1/forever-official/libexec/evaStatusService/static/client-app/js/components/header.js":[function(e,t){Navbar=ReactBootstrap.Navbar,Nav=ReactBootstrap.Nav,NavItem=ReactBootstrap.NavItem,Header=React.createClass({displayName:"Header",render:function(){return React.createElement(Navbar,null,React.createElement(Nav,null,React.createElement(NavItem,null,"話語補聽"),React.createElement(NavItem,null,"話語搜尋"),React.createElement(NavItem,null,"宣教表格")))}}),t.exports=Header},{}],"/Users/lucasmf/Documents/workspace-sts-3.6.3.SR1/forever-official/libexec/evaStatusService/static/client-app/js/finder/index.js":[function(e){window.Showdown=e("showdown"),window.Request=e("superagent"),window.Button=ReactBootstrap.Button,window.Modal=ReactBootstrap.Modal,window.OverlayMixin=ReactBootstrap.OverlayMixin,window.ProgressBar=ReactBootstrap.ProgressBar,window.Header=e("../components/header"),e("bootstrap-contextmenu"),FinderActions=Reflux.createActions(["load","loaded","refresh","download","playVideo","playAudio","select","unSelect","openFile","updateUploadProgress","upload"]),FinderListStore=Reflux.createStore({init:function(){this.listenTo(FinderActions.load,this.fetchData),this.listenTo(FinderActions.refresh,this.refresh)},fetchData:function(e){e=e||"",this.dir=e,Request.get("/rest/finder/list.html/?dir="+e,function(t){this.list=JSON.parse(t.text),FinderActions.loaded(e),this.trigger(this.list)}.bind(this))},refresh:function(){this.fetchData(this.dir)},getInitialState:function(){return this.list=[],this.dir="",this.list}}),FinderUploadStore=Reflux.createStore({getInitialState:function(){return this.progresses=[],this.progresses},init:function(){this.listenTo(FinderActions.updateUploadProgress,this.updateUploadProgress),this.listenTo(FinderActions.upload,this.upload)},updateUploadProgress:function(e){if(e){var t=0;for(t=0;t<this.progresses.length;t++)if(this.progresses[t].file.name==e.file.name){this.progresses[t]=e;break}t==this.progresses.length&&this.progresses.push(e)}this.trigger(this.progresses)},upload:function(e){for(var t in this.progresses){var n=new XMLHttpRequest,r=new FormData;r.append("file",t.file),r.append("dir",e),n.open("post","/rest/finder/upload.html/",!0),n.upload.addEventListener("progress",function(e){t.progress=100*Math.ceil(e.loaded/e.total),this.trigger(this.progresses)}.bind(this),!1),n.onreadystatechange=function(){4==this.readyState&&FinderActions.load(e)},console.log(r),n.send(r)}}});var t=React.createClass({displayName:"FileContextMenu",render:function(){return React.createElement("div",{id:"context-menu"},React.createElement("ul",{className:"dropdown-menu",role:"menu"},React.createElement("li",{action:"delete"},React.createElement("a",null,"Delete")),React.createElement("li",{action:"rename"},React.createElement("a",null,"Rename"))))}}),n=React.createClass({displayName:"DirContextMenu",render:function(){return React.createElement("div",{id:"dir-context-menu"},React.createElement("ul",{className:"dropdown-menu",role:"menu"},React.createElement("li",{action:"mkdir"},React.createElement("a",null,"Create Dir"))))}}),r=React.createClass({displayName:"File",mixins:[Reflux.listenTo(FinderActions.select,"onSelectAction"),Reflux.listenTo(FinderActions.unSelect,"onUnSelectAction"),Reflux.listenTo(FinderActions.openFile,"onOpenAction")],onSelectAction:function(e){this.setState(e.name==this.props.file.name?{selected:!0}:{selected:!1})},onUnSelectAction:function(){this.setState({selected:!1})},onOpenAction:function(e){e.name==this.props.file.name&&open()},getInitialState:function(){return{iconUrl:this.getIconUrl(this.props.file),selected:!1}},componentWillReceiveProps:function(e){this.setState({iconUrl:this.getIconUrl(e.file)})},getIconUrl:function(e){if(e.isDir)return"/img/file-type-icon/folder-icon.png";var t=e.name,n=t.substring(t.lastIndexOf(".")+1);return"/img/file-type-icon/"+n+"-icon.png"},open:function(){var e=this.props.file;if(this.props.file.isDir)FinderActions.load(e.path);else{var t=e.name,n=t.substring(t.lastIndexOf(".")+1);"mp4"==n||"mov"==n?FinderActions.playVideo(e.path):"mp3"==n?FinderActions.playAudio(e.path):window.location.href="/rest/finder/download.html/?path="+this.props.file.path}},componentDidMount:function(){var e=this;$(this.refs.fileDiv.getDOMNode()).contextmenu({target:"#context-menu",before:function(){return FinderActions.select(e.props.file),!0},onItem:function(t,n){var r=$(n.currentTarget).attr("action");if(console.log(r),"delete"==r)confirm("Are you sure you want delete this file/dir?")&&Request.post("/rest/finder/"+r+".html/").type("form").send({path:e.props.file.path}).end(function(){FinderActions.refresh()});else if("rename"==r){var i=prompt("Please enter new name: ");Request.post("/rest/finder/"+r+".html/").type("form").send({path:e.props.file.path,newName:i}).end(function(){FinderActions.refresh()})}}})},onClickEvent:function(){this.props.file.isDir?(FinderActions.unSelect(),this.open()):FinderActions.select(this.props.file)},render:function(){var e={flaot:"left",display:"inline-block",backgroundColor:this.state.selected?"#dddddd":"#ffffff",width:"150"};return React.createElement("div",{onContextMenu:this.onClickEvent,onClick:this.onClickEvent,onDoubleClick:this.open,style:e,ref:"fileDiv"},React.createElement("img",{src:this.state.iconUrl}),React.createElement("div",null,this.props.file.name))}}),i=React.createClass({displayName:"Finder",mixins:[Reflux.connect(FinderListStore,"list"),Reflux.connect(FinderActions.loaded,"currentDir")],componentDidMount:function(){var e=this;$(this.refs.finderDiv.getDOMNode()).contextmenu({target:"#dir-context-menu",onItem:function(t,n){var r=$(n.currentTarget).attr("action"),i=prompt("Please enter directory name: ");Request.post("/rest/finder/"+r+".html/").type("form").send({path:e.state.currentDir,dirName:i}).end(function(){FinderActions.refresh()})}})},render:function(){return React.createElement("div",{ref:"finderDiv"},this.state.list.map(function(e){return React.createElement(r,{file:e})},this))}}),o=React.createClass({displayName:"VideoPlayer",componentDidMount:function(){jwplayer("videoPlayer").setup({file:"http://example.com/media/my_video.mp4",image:"//www.longtailvideo.com/content/images/jw-player/lWMJeVvV-876.jpg",width:"100%",aspectratio:"16:9"})},render:function(){return React.createElement("div",{id:"videoPlayer"})}}),a=React.createClass({displayName:"PlayerModal",mixins:[OverlayMixin,Reflux.listenTo(FinderActions.playAudio,"onPlayAudio"),Reflux.listenTo(FinderActions.playVideo,"onPlayVideo")],onPlayVideo:function(e){this.setState({isModalOpen:!0,videoFilePath:e})},onPlayAudio:function(e){this.setState({isModalOpen:!0,audioFilePath:e})},getInitialState:function(){return{isModalOpen:!1}},handleToggle:function(){this.setState({isModalOpen:!this.state.isModalOpen})},render:function(){return React.createElement("span",null)},renderOverlay:function(){return this.state.isModalOpen?React.createElement(Modal,{title:"Player",onRequestHide:this.handleToggle},React.createElement("div",{className:"modal-body"},React.createElement(o,null))):React.createElement("span",null)}}),s=React.createClass({displayName:"FileUploadModal",mixins:[OverlayMixin,Reflux.connect(FinderActions.loaded,"currentDir")],getInitialState:function(){return{isModalOpen:!1,currentDir:""}},handleToggle:function(){this.setState({isModalOpen:!this.state.isModalOpen})},render:function(){return React.createElement(Button,{onClick:this.handleToggle,bsStyle:"primary"},"Upload")},renderOverlay:function(){return this.state.isModalOpen?React.createElement(Modal,{title:"File Upload",onRequestHide:this.handleToggle},React.createElement("div",{className:"modal-body"},React.createElement(c,{currentDir:this.state.currentDir}))):React.createElement("span",null)}}),c=React.createClass({displayName:"FinderUpload",mixins:[Reflux.connect(FinderUploadStore,"progresses")],componentDidMount:function(){FinderActions.updateUploadProgress()},setFile:function(){this.file=this.refs.file.getDOMNode().files[0];var e={};e.file=this.file,e.progress=0,FinderActions.updateUploadProgress(e)},upload:function(e){e.preventDefault(),FinderActions.upload(this.props.currentDir)},render:function(){return React.createElement("form",null,"Current Directory: ",this.props.currentDir,React.createElement("input",{type:"file",ref:"file",onChange:this.setFile}),this.state.progresses.map(function(e){return React.createElement("div",null,React.createElement("span",null,e.file.name),React.createElement(ProgressBar,{active:!0,now:e.progress}))},this),React.createElement("input",{type:"submit",value:"Upload",onClick:this.upload}))}}),l=React.createClass({displayName:"Footer",mixins:[Reflux.listenTo(FinderActions.select,"onSelectAction"),Reflux.listenTo(FinderActions.unSelect,"onUnSelectAction")],onSelectAction:function(e){this.setState({selectedFile:e,selected:!0})},onUnSelectAction:function(){this.setState({selected:!1})},getInitialState:function(){return{}},open:function(e){e.preventDefault(),FinderActions.openFile(this.state.selectedFile)},render:function(){var e={textAlign:"center",position:"fixed",bottom:"0",width:"100%",display:this.state.selected?"block":"none"},t={width:"500"};return React.createElement(Navbar,{style:e},React.createElement(Button,{bsStyle:"primary",bsSize:"large",style:t,onClick:this.open},"Open"))}});React.render(React.createElement("div",null,React.createElement(Header,null),React.createElement(n,null),React.createElement(t,null),React.createElement(a,null),React.createElement(i,null),React.createElement(s,null),React.createElement(l,null)),document.getElementById("content")),FinderActions.load()},{"../components/header":"/Users/lucasmf/Documents/workspace-sts-3.6.3.SR1/forever-official/libexec/evaStatusService/static/client-app/js/components/header.js","bootstrap-contextmenu":"/Users/lucasmf/Documents/workspace-sts-3.6.3.SR1/forever-official/libexec/evaStatusService/static/node_modules/bootstrap-contextmenu/bootstrap-contextmenu.js",showdown:"/Users/lucasmf/Documents/workspace-sts-3.6.3.SR1/forever-official/libexec/evaStatusService/static/node_modules/showdown/src/showdown.js",superagent:"/Users/lucasmf/Documents/workspace-sts-3.6.3.SR1/forever-official/libexec/evaStatusService/static/node_modules/superagent/lib/client.js"}],"/Users/lucasmf/Documents/workspace-sts-3.6.3.SR1/forever-official/libexec/evaStatusService/static/node_modules/bootstrap-contextmenu/bootstrap-contextmenu.js":[function(){!function(e){"use strict";var t='[data-toggle="context"]',n=function(t,n){this.$element=e(t),this.before=n.before||this.before,this.onItem=n.onItem||this.onItem,this.scopes=n.scopes||null,n.target&&this.$element.data("target",n.target),this.listen()};n.prototype={constructor:n,show:function(t){var n,r,i,o,a={relatedTarget:this,target:t.currentTarget};if(!this.isDisabled()&&(this.closemenu(),this.before.call(this,t,e(t.currentTarget))))return n=this.getMenu(),n.trigger(r=e.Event("show.bs.context",a)),i=this.getPosition(t,n),o="li:not(.divider)",n.attr("style","").css(i).addClass("open").on("click.context.data-api",o,e.proxy(this.onItem,this,e(t.currentTarget))).trigger("shown.bs.context",a),e("html").on("click.context.data-api",n.selector,e.proxy(this.closemenu,this)),!1},closemenu:function(){var t,n,r,i;return t=this.getMenu(),t.hasClass("open")?(i={relatedTarget:this},t.trigger(n=e.Event("hide.bs.context",i)),r="li:not(.divider)",t.removeClass("open").off("click.context.data-api",r).trigger("hidden.bs.context",i),e("html").off("click.context.data-api",t.selector),!1):void 0},keydown:function(e){27==e.which&&this.closemenu(e)},before:function(){return!0},onItem:function(){return!0},listen:function(){this.$element.on("contextmenu.context.data-api",this.scopes,e.proxy(this.show,this)),e("html").on("click.context.data-api",e.proxy(this.closemenu,this)),e("html").on("keydown.context.data-api",e.proxy(this.keydown,this))},destroy:function(){this.$element.off(".context.data-api").removeData("context"),e("html").off(".context.data-api")},isDisabled:function(){return this.$element.hasClass("disabled")||this.$element.attr("disabled")},getMenu:function(){var t,n=this.$element.data("target");return n||(n=this.$element.attr("href"),n=n&&n.replace(/.*(?=#[^\s]*$)/,"")),t=e(n),t&&t.length?t:this.$element.find(n)},getPosition:function(t,n){var r,i,o,a=t.clientX,s=t.clientY,c=e(window).width(),l=e(window).height(),u=n.find(".dropdown-menu").outerWidth(),p=n.find(".dropdown-menu").outerHeight(),d={position:"absolute","z-index":9999};return r=s+p>l?{top:s-p+e(window).scrollTop()}:{top:s+e(window).scrollTop()},i=a+u>c&&a-u>0?{left:a-u+e(window).scrollLeft()}:{left:a+e(window).scrollLeft()},o=n.offsetParent().offset(),i.left=i.left-o.left,r.top=r.top-o.top,e.extend(d,r,i)}},e.fn.contextmenu=function(t,r){return this.each(function(){var i=e(this),o=i.data("context"),a="object"==typeof t&&t;o||i.data("context",o=new n(i,a)),"string"==typeof t&&o[t].call(o,r)})},e.fn.contextmenu.Constructor=n,e(document).on("contextmenu.context.data-api",function(){e(t).each(function(){var t=e(this).data("context");t&&t.closemenu()})}).on("contextmenu.context.data-api",t,function(t){e(this).contextmenu("show",t),t.preventDefault(),t.stopPropagation()})}(jQuery)},{}],"/Users/lucasmf/Documents/workspace-sts-3.6.3.SR1/forever-official/libexec/evaStatusService/static/node_modules/browserify/lib/_empty.js":[function(){},{}],"/Users/lucasmf/Documents/workspace-sts-3.6.3.SR1/forever-official/libexec/evaStatusService/static/node_modules/showdown/src/showdown.js":[function(e,t,n){(function(r){var i={extensions:{}},o=(i.forEach=function(e,t){if("function"==typeof e.forEach)e.forEach(t);else{var n,r=e.length;for(n=0;r>n;n++)t(e[n],n,e)}},function(e){return e.replace(/[_-]||\s/g,"").toLowerCase()});i.converter=function(a){var s,c,l,u=0,p=[],d=[];if("undefind"!=typeof t&&"undefined"!=typeof n&&"undefind"!=typeof e){var f=e("fs");if(f&&f.readdirSync){var h=f.readdirSync((r||".")+"/extensions").filter(function(e){return~e.indexOf(".js")}).map(function(e){return e.replace(/\.js$/,"")});i.forEach(h,function(t){var n=o(t);i.extensions[n]=e("./extensions/"+t)})}}if(this.makeHtml=function(e){return s={},c={},l=[],e=e.replace(/~/g,"~T"),e=e.replace(/\$/g,"~D"),e=e.replace(/\r\n/g,"\n"),e=e.replace(/\r/g,"\n"),e="\n\n"+e+"\n\n",e=X(e),e=e.replace(/^[ \t]+$/gm,""),i.forEach(p,function(t){e=v(t,e)}),e=T(e),e=w(e),e=y(e),e=b(e),e=I(e),e=e.replace(/~D/g,"$$"),e=e.replace(/~T/g,"~"),i.forEach(d,function(t){e=v(t,e)}),e},a&&a.extensions){var m=this;i.forEach(a.extensions,function(e){if("string"==typeof e&&(e=i.extensions[o(e)]),"function"!=typeof e)throw"Extension '"+e+"' could not be loaded.  It was either not found or is not a valid extension.";i.forEach(e(m),function(e){e.type?"language"===e.type||"lang"===e.type?p.push(e):("output"===e.type||"html"===e.type)&&d.push(e):d.push(e)})})}var g,v=function(e,t){if(e.regex){var n=new RegExp(e.regex,"g");return t.replace(n,e.replace)}return e.filter?e.filter(t):void 0},y=function(e){return e+="~0",e=e.replace(/^[ ]{0,3}\[(.+)\]:[ \t]*\n?[ \t]*<?(\S+?)>?[ \t]*\n?[ \t]*(?:(\n*)["(](.+?)[")][ \t]*)?(?:\n+|(?=~0))/gm,function(e,t,n,r,i){return t=t.toLowerCase(),s[t]=q(n),r?r+i:(i&&(c[t]=i.replace(/"/g,"&quot;")),"")}),e=e.replace(/~0/,"")},w=function(e){e=e.replace(/\n/g,"\n\n");return e=e.replace(/^(<(p|div|h[1-6]|blockquote|pre|table|dl|ol|ul|script|noscript|form|fieldset|iframe|math|ins|del)\b[^\r]*?\n<\/\2>[ \t]*(?=\n+))/gm,x),e=e.replace(/^(<(p|div|h[1-6]|blockquote|pre|table|dl|ol|ul|script|noscript|form|fieldset|iframe|math|style|section|header|footer|nav|article|aside)\b[^\r]*?<\/\2>[ \t]*(?=\n+)\n)/gm,x),e=e.replace(/(\n[ ]{0,3}(<(hr)\b([^<>])*?\/?>)[ \t]*(?=\n{2,}))/g,x),e=e.replace(/(\n\n[ ]{0,3}<!(--[^\r]*?--\s*)+>[ \t]*(?=\n{2,}))/g,x),e=e.replace(/(?:\n\n)([ ]{0,3}(?:<([?%])[^\r]*?\2>)[ \t]*(?=\n{2,}))/g,x),e=e.replace(/\n\n/g,"\n")},x=function(e,t){var n=t;return n=n.replace(/\n\n/g,"\n"),n=n.replace(/^\n/,""),n=n.replace(/\n+$/g,""),n="\n\n~K"+(l.push(n)-1)+"K\n\n"},b=function(e){e=k(e);var t=M("<hr />");return e=e.replace(/^[ ]{0,2}([ ]?\*[ ]?){3,}[ \t]*$/gm,t),e=e.replace(/^[ ]{0,2}([ ]?\-[ ]?){3,}[ \t]*$/gm,t),e=e.replace(/^[ ]{0,2}([ ]?\_[ ]?){3,}[ \t]*$/gm,t),e=C(e),e=F(e),e=O(e),e=w(e),e=P(e)},R=function(e){return e=$(e),e=S(e),e=N(e),e=D(e),e=E(e),e=L(e),e=q(e),e=U(e),e=e.replace(/  +\n/g," <br />\n")},S=function(e){var t=/(<[a-z\/!$]("[^"]*"|'[^']*'|[^'">])*>|<!(--.*?--\s*)+>)/gi;return e=e.replace(t,function(e){var t=e.replace(/(.)<\/?code>(?=.)/g,"$1`");return t=z(t,"\\`*_")})},E=function(e){return e=e.replace(/(\[((?:\[[^\]]*\]|[^\[\]])*)\][ ]?(?:\n[ ]*)?\[(.*?)\])()()()()/g,_),e=e.replace(/(\[((?:\[[^\]]*\]|[^\[\]])*)\]\([ \t]*()<?(.*?(?:\(.*?\).*?)?)>?[ \t]*((['"])(.*?)\6[ \t]*)?\))/g,_),e=e.replace(/(\[([^\[\]]+)\])()()()()()/g,_)},_=function(e,t,n,r,i,o,a,l){void 0==l&&(l="");var u=t,p=n,d=r.toLowerCase(),f=i,h=l;if(""==f)if(""==d&&(d=p.toLowerCase().replace(/ ?\n/g," ")),f="#"+d,void 0!=s[d])f=s[d],void 0!=c[d]&&(h=c[d]);else{if(!(u.search(/\(\s*\)$/m)>-1))return u;f=""}f=z(f,"*_");var m='<a href="'+f+'"';return""!=h&&(h=h.replace(/"/g,"&quot;"),h=z(h,"*_"),m+=' title="'+h+'"'),m+=">"+p+"</a>"},D=function(e){return e=e.replace(/(!\[(.*?)\][ ]?(?:\n[ ]*)?\[(.*?)\])()()()()/g,A),e=e.replace(/(!\[(.*?)\]\s?\([ \t]*()<?(\S+?)>?[ \t]*((['"])(.*?)\6[ \t]*)?\))/g,A)},A=function(e,t,n,r,i,o,a,l){var u=t,p=n,d=r.toLowerCase(),f=i,h=l;if(h||(h=""),""==f){if(""==d&&(d=p.toLowerCase().replace(/ ?\n/g," ")),f="#"+d,void 0==s[d])return u;f=s[d],void 0!=c[d]&&(h=c[d])}p=p.replace(/"/g,"&quot;"),f=z(f,"*_");var m='<img src="'+f+'" alt="'+p+'"';return h=h.replace(/"/g,"&quot;"),h=z(h,"*_"),m+=' title="'+h+'"',m+=" />"},k=function(e){function t(e){return e.replace(/[^\w]/g,"").toLowerCase()}return e=e.replace(/^(.+)[ \t]*\n=+[ \t]*\n+/gm,function(e,n){return M('<h1 id="'+t(n)+'">'+R(n)+"</h1>")}),e=e.replace(/^(.+)[ \t]*\n-+[ \t]*\n+/gm,function(e,n){return M('<h2 id="'+t(n)+'">'+R(n)+"</h2>")}),e=e.replace(/^(\#{1,6})[ \t]*(.+?)[ \t]*\#*\n+/gm,function(e,n,r){var i=n.length;return M("<h"+i+' id="'+t(r)+'">'+R(r)+"</h"+i+">")})},C=function(e){e+="~0";var t=/^(([ ]{0,3}([*+-]|\d+[.])[ \t]+)[^\r]+?(~0|\n{2,}(?=\S)(?![ \t]*(?:[*+-]|\d+[.])[ \t]+)))/gm;return u?e=e.replace(t,function(e,t,n){var r=t,i=n.search(/[*+-]/g)>-1?"ul":"ol";r=r.replace(/\n{2,}/g,"\n\n\n");var o=g(r);return o=o.replace(/\s+$/,""),o="<"+i+">"+o+"</"+i+">\n"}):(t=/(\n\n|^\n?)(([ ]{0,3}([*+-]|\d+[.])[ \t]+)[^\r]+?(~0|\n{2,}(?=\S)(?![ \t]*(?:[*+-]|\d+[.])[ \t]+)))/g,e=e.replace(t,function(e,t,n,r){var i=t,o=n,a=r.search(/[*+-]/g)>-1?"ul":"ol",o=o.replace(/\n{2,}/g,"\n\n\n"),s=g(o);return s=i+"<"+a+">\n"+s+"</"+a+">\n"})),e=e.replace(/~0/,"")};g=function(e){return u++,e=e.replace(/\n{2,}$/,"\n"),e+="~0",e=e.replace(/(\n)?(^[ \t]*)([*+-]|\d+[.])[ \t]+([^\r]+?(\n{1,2}))(?=\n*(~0|\2([*+-]|\d+[.])[ \t]+))/gm,function(e,t,n,r,i){var o=i,a=t;return a||o.search(/\n{2,}/)>-1?o=b(B(o)):(o=C(B(o)),o=o.replace(/\n$/,""),o=R(o)),"<li>"+o+"</li>\n"}),e=e.replace(/~0/g,""),u--,e};var F=function(e){return e+="~0",e=e.replace(/(?:\n\n|^)((?:(?:[ ]{4}|\t).*\n+)+)(\n*[ ]{0,3}[^ \t\n]|(?=~0))/g,function(e,t,n){var r=t,i=n;return r=j(B(r)),r=X(r),r=r.replace(/^\n+/g,""),r=r.replace(/\n+$/g,""),r="<pre><code>"+r+"\n</code></pre>",M(r)+i}),e=e.replace(/~0/,"")},T=function(e){return e+="~0",e=e.replace(/(?:^|\n)```(.*)\n([\s\S]*?)\n```/g,function(e,t,n){var r=t,i=n;return i=j(i),i=X(i),i=i.replace(/^\n+/g,""),i=i.replace(/\n+$/g,""),i="<pre><code"+(r?' class="'+r+'"':"")+">"+i+"\n</code></pre>",M(i)}),e=e.replace(/~0/,"")},M=function(e){return e=e.replace(/(^\n+|\n+$)/g,""),"\n\n~K"+(l.push(e)-1)+"K\n\n"},$=function(e){return e=e.replace(/(^|[^\\])(`+)([^\r]*?[^`])\2(?!`)/gm,function(e,t,n,r){var i=r;return i=i.replace(/^([ \t]*)/g,""),i=i.replace(/[ \t]*$/g,""),i=j(i),t+"<code>"+i+"</code>"})},j=function(e){return e=e.replace(/&/g,"&amp;"),e=e.replace(/</g,"&lt;"),e=e.replace(/>/g,"&gt;"),e=z(e,"*_{}[]\\",!1)},U=function(e){return e=e.replace(/(\*\*|__)(?=\S)([^\r]*?\S[*_]*)\1/g,"<strong>$2</strong>"),e=e.replace(/(\*|_)(?=\S)([^\r]*?\S)\1/g,"<em>$2</em>")},O=function(e){return e=e.replace(/((^[ \t]*>[ \t]?.+\n(.+\n)*\n*)+)/gm,function(e,t){var n=t;return n=n.replace(/^[ \t]*>[ \t]?/gm,"~0"),n=n.replace(/~0/g,""),n=n.replace(/^[ \t]+$/gm,""),n=b(n),n=n.replace(/(^|\n)/g,"$1  "),n=n.replace(/(\s*<pre>[^\r]+?<\/pre>)/gm,function(e,t){var n=t;return n=n.replace(/^  /gm,"~0"),n=n.replace(/~0/g,"")}),M("<blockquote>\n"+n+"\n</blockquote>")})},P=function(e){e=e.replace(/^\n+/g,""),e=e.replace(/\n+$/g,"");for(var t=e.split(/\n{2,}/g),n=[],r=t.length,i=0;r>i;i++){var o=t[i];o.search(/~K(\d+)K/g)>=0?n.push(o):o.search(/\S/)>=0&&(o=R(o),o=o.replace(/^([ \t]*)/g,"<p>"),o+="</p>",n.push(o))}r=n.length;for(var i=0;r>i;i++)for(;n[i].search(/~K(\d+)K/)>=0;){var a=l[RegExp.$1];a=a.replace(/\$/g,"$$$$"),n[i]=n[i].replace(/~K\d+K/,a)}return n.join("\n\n")},q=function(e){return e=e.replace(/&(?!#?[xX]?(?:[0-9a-fA-F]+|\w+);)/g,"&amp;"),e=e.replace(/<(?![a-z\/?\$!])/gi,"&lt;")},N=function(e){return e=e.replace(/\\(\\)/g,K),e=e.replace(/\\([`*_{}\[\]()>#+-.!])/g,K)},L=function(e){return e=e.replace(/<((https?|ftp|dict):[^'">\s]+)>/gi,'<a href="$1">$1</a>'),e=e.replace(/<(?:mailto:)?([-.\w]+\@[-a-z0-9]+(\.[-a-z0-9]+)*\.[a-z]+)>/gi,function(e,t){return H(I(t))})},H=function(e){var t=[function(e){return"&#"+e.charCodeAt(0)+";"},function(e){return"&#x"+e.charCodeAt(0).toString(16)+";"},function(e){return e}];return e="mailto:"+e,e=e.replace(/./g,function(e){if("@"==e)e=t[Math.floor(2*Math.random())](e);else if(":"!=e){var n=Math.random();e=n>.9?t[2](e):n>.45?t[1](e):t[0](e)}return e}),e='<a href="'+e+'">'+e+"</a>",e=e.replace(/">.+:/g,'">')},I=function(e){return e=e.replace(/~E(\d+)E/g,function(e,t){var n=parseInt(t);return String.fromCharCode(n)})},B=function(e){return e=e.replace(/^(\t|[ ]{1,4})/gm,"~0"),e=e.replace(/~0/g,"")},X=function(e){return e=e.replace(/\t(?=\t)/g,"    "),e=e.replace(/\t/g,"~A~B"),e=e.replace(/~B(.+?)~A/g,function(e,t){for(var n=t,r=4-n.length%4,i=0;r>i;i++)n+=" ";return n}),e=e.replace(/~A/g,"    "),e=e.replace(/~B/g,"")},z=function(e,t,n){var r="(["+t.replace(/([\[\]\\])/g,"\\$1")+"])";n&&(r="\\\\"+r);var i=new RegExp(r,"g");return e=e.replace(i,K)},K=function(e,t){var n=t.charCodeAt(0);return"~E"+n+"E"}},"undefined"!=typeof t&&(t.exports=i),"function"==typeof define&&define.amd&&define("showdown",function(){return i})}).call(this,"/node_modules/showdown/src")},{fs:"/Users/lucasmf/Documents/workspace-sts-3.6.3.SR1/forever-official/libexec/evaStatusService/static/node_modules/browserify/lib/_empty.js"}],"/Users/lucasmf/Documents/workspace-sts-3.6.3.SR1/forever-official/libexec/evaStatusService/static/node_modules/superagent/lib/client.js":[function(e,t){function n(){}function r(e){var t={}.toString.call(e);switch(t){case"[object File]":case"[object Blob]":case"[object FormData]":return!0;default:return!1}}function i(){if(g.XMLHttpRequest&&("file:"!=g.location.protocol||!g.ActiveXObject))return new XMLHttpRequest;try{return new ActiveXObject("Microsoft.XMLHTTP")}catch(e){}try{return new ActiveXObject("Msxml2.XMLHTTP.6.0")}catch(e){}try{return new ActiveXObject("Msxml2.XMLHTTP.3.0")}catch(e){}try{return new ActiveXObject("Msxml2.XMLHTTP")}catch(e){}return!1}function o(e){return e===Object(e)}function a(e){if(!o(e))return e;var t=[];for(var n in e)null!=e[n]&&t.push(encodeURIComponent(n)+"="+encodeURIComponent(e[n]));return t.join("&")}function s(e){for(var t,n,r={},i=e.split("&"),o=0,a=i.length;a>o;++o)n=i[o],t=n.split("="),r[decodeURIComponent(t[0])]=decodeURIComponent(t[1]);return r}function c(e){var t,n,r,i,o=e.split(/\r?\n/),a={};o.pop();for(var s=0,c=o.length;c>s;++s)n=o[s],t=n.indexOf(":"),r=n.slice(0,t).toLowerCase(),i=v(n.slice(t+1)),a[r]=i;return a}function l(e){return e.split(/ *; */).shift()}function u(e){return m(e.split(/ *; */),function(e,t){var n=t.split(/ *= */),r=n.shift(),i=n.shift();return r&&i&&(e[r]=i),e},{})}function p(e,t){t=t||{},this.req=e,this.xhr=this.req.xhr,this.text="HEAD"!=this.req.method?this.xhr.responseText:null,this.setStatusProperties(this.xhr.status),this.header=this.headers=c(this.xhr.getAllResponseHeaders()),this.header["content-type"]=this.xhr.getResponseHeader("content-type"),this.setHeaderProperties(this.header),this.body="HEAD"!=this.req.method?this.parseBody(this.text):null}function d(e,t){var n=this;h.call(this),this._query=this._query||[],this.method=e,this.url=t,this.header={},this._header={},this.on("end",function(){var e=null,t=null;try{t=new p(n)}catch(r){e=new Error("Parser is unable to parse the response"),e.parse=!0,e.original=r}n.callback(e,t)})}function f(e,t){return"function"==typeof t?new d("GET",e).end(t):1==arguments.length?new d("GET",e):new d(e,t)}var h=e("emitter"),m=e("reduce"),g="undefined"==typeof window?this:window,v="".trim?function(e){return e.trim()}:function(e){return e.replace(/(^\s*|\s*$)/g,"")};f.serializeObject=a,f.parseString=s,f.types={html:"text/html",json:"application/json",xml:"application/xml",urlencoded:"application/x-www-form-urlencoded",form:"application/x-www-form-urlencoded","form-data":"application/x-www-form-urlencoded"},f.serialize={"application/x-www-form-urlencoded":a,"application/json":JSON.stringify},f.parse={"application/x-www-form-urlencoded":s,"application/json":JSON.parse},p.prototype.get=function(e){return this.header[e.toLowerCase()]},p.prototype.setHeaderProperties=function(){var e=this.header["content-type"]||"";this.type=l(e);var t=u(e);for(var n in t)this[n]=t[n]},p.prototype.parseBody=function(e){var t=f.parse[this.type];return t&&e&&e.length?t(e):null},p.prototype.setStatusProperties=function(e){var t=e/100|0;this.status=e,this.statusType=t,this.info=1==t,this.ok=2==t,this.clientError=4==t,this.serverError=5==t,this.error=4==t||5==t?this.toError():!1,this.accepted=202==e,this.noContent=204==e||1223==e,this.badRequest=400==e,this.unauthorized=401==e,this.notAcceptable=406==e,this.notFound=404==e,this.forbidden=403==e},p.prototype.toError=function(){var e=this.req,t=e.method,n=e.url,r="cannot "+t+" "+n+" ("+this.status+")",i=new Error(r);return i.status=this.status,i.method=t,i.url=n,i},f.Response=p,h(d.prototype),d.prototype.use=function(e){return e(this),this},d.prototype.timeout=function(e){return this._timeout=e,this},d.prototype.clearTimeout=function(){return this._timeout=0,clearTimeout(this._timer),this},d.prototype.abort=function(){return this.aborted?void 0:(this.aborted=!0,this.xhr.abort(),this.clearTimeout(),this.emit("abort"),this)},d.prototype.set=function(e,t){if(o(e)){for(var n in e)this.set(n,e[n]);return this}return this._header[e.toLowerCase()]=t,this.header[e]=t,this},d.prototype.unset=function(e){return delete this._header[e.toLowerCase()],delete this.header[e],this},d.prototype.getHeader=function(e){return this._header[e.toLowerCase()]},d.prototype.type=function(e){return this.set("Content-Type",f.types[e]||e),this},d.prototype.accept=function(e){return this.set("Accept",f.types[e]||e),this},d.prototype.auth=function(e,t){var n=btoa(e+":"+t);return this.set("Authorization","Basic "+n),this},d.prototype.query=function(e){return"string"!=typeof e&&(e=a(e)),e&&this._query.push(e),this},d.prototype.field=function(e,t){return this._formData||(this._formData=new FormData),this._formData.append(e,t),this},d.prototype.attach=function(e,t,n){return this._formData||(this._formData=new FormData),this._formData.append(e,t,n),this},d.prototype.send=function(e){var t=o(e),n=this.getHeader("Content-Type");if(t&&o(this._data))for(var r in e)this._data[r]=e[r];else"string"==typeof e?(n||this.type("form"),n=this.getHeader("Content-Type"),this._data="application/x-www-form-urlencoded"==n?this._data?this._data+"&"+e:e:(this._data||"")+e):this._data=e;return t?(n||this.type("json"),this):this},d.prototype.callback=function(e,t){var n=this._callback;return this.clearTimeout(),2==n.length?n(e,t):e?this.emit("error",e):void n(t)},d.prototype.crossDomainError=function(){var e=new Error("Origin is not allowed by Access-Control-Allow-Origin");e.crossDomain=!0,this.callback(e)},d.prototype.timeoutError=function(){var e=this._timeout,t=new Error("timeout of "+e+"ms exceeded");t.timeout=e,this.callback(t)},d.prototype.withCredentials=function(){return this._withCredentials=!0,this},d.prototype.end=function(e){var t=this,o=this.xhr=i(),a=this._query.join("&"),s=this._timeout,c=this._formData||this._data;if(this._callback=e||n,o.onreadystatechange=function(){return 4==o.readyState?0==o.status?t.aborted?t.timeoutError():t.crossDomainError():void t.emit("end"):void 0},o.upload&&(o.upload.onprogress=function(e){e.percent=e.loaded/e.total*100,t.emit("progress",e)}),s&&!this._timer&&(this._timer=setTimeout(function(){t.abort()},s)),a&&(a=f.serializeObject(a),this.url+=~this.url.indexOf("?")?"&"+a:"?"+a),o.open(this.method,this.url,!0),this._withCredentials&&(o.withCredentials=!0),"GET"!=this.method&&"HEAD"!=this.method&&"string"!=typeof c&&!r(c)){var l=f.serialize[this.getHeader("Content-Type")];l&&(c=l(c))}for(var u in this.header)null!=this.header[u]&&o.setRequestHeader(u,this.header[u]);return this.emit("request",this),o.send(c),this},f.Request=d,f.get=function(e,t,n){var r=f("GET",e);return"function"==typeof t&&(n=t,t=null),t&&r.query(t),n&&r.end(n),r},f.head=function(e,t,n){var r=f("HEAD",e);return"function"==typeof t&&(n=t,t=null),t&&r.send(t),n&&r.end(n),r},f.del=function(e,t){var n=f("DELETE",e);return t&&n.end(t),n},f.patch=function(e,t,n){var r=f("PATCH",e);return"function"==typeof t&&(n=t,t=null),t&&r.send(t),n&&r.end(n),r},f.post=function(e,t,n){var r=f("POST",e);return"function"==typeof t&&(n=t,t=null),t&&r.send(t),n&&r.end(n),r},f.put=function(e,t,n){var r=f("PUT",e);return"function"==typeof t&&(n=t,t=null),t&&r.send(t),n&&r.end(n),r},t.exports=f},{emitter:"/Users/lucasmf/Documents/workspace-sts-3.6.3.SR1/forever-official/libexec/evaStatusService/static/node_modules/superagent/node_modules/component-emitter/index.js",reduce:"/Users/lucasmf/Documents/workspace-sts-3.6.3.SR1/forever-official/libexec/evaStatusService/static/node_modules/superagent/node_modules/reduce-component/index.js"}],"/Users/lucasmf/Documents/workspace-sts-3.6.3.SR1/forever-official/libexec/evaStatusService/static/node_modules/superagent/node_modules/component-emitter/index.js":[function(e,t){function n(e){return e?r(e):void 0}function r(e){for(var t in n.prototype)e[t]=n.prototype[t];return e}t.exports=n,n.prototype.on=n.prototype.addEventListener=function(e,t){return this._callbacks=this._callbacks||{},(this._callbacks[e]=this._callbacks[e]||[]).push(t),this},n.prototype.once=function(e,t){function n(){r.off(e,n),t.apply(this,arguments)}var r=this;return this._callbacks=this._callbacks||{},n.fn=t,this.on(e,n),this},n.prototype.off=n.prototype.removeListener=n.prototype.removeAllListeners=n.prototype.removeEventListener=function(e,t){if(this._callbacks=this._callbacks||{},0==arguments.length)return this._callbacks={},this;var n=this._callbacks[e];if(!n)return this;if(1==arguments.length)return delete this._callbacks[e],this;for(var r,i=0;i<n.length;i++)if(r=n[i],r===t||r.fn===t){n.splice(i,1);break}return this},n.prototype.emit=function(e){this._callbacks=this._callbacks||{};var t=[].slice.call(arguments,1),n=this._callbacks[e];if(n){n=n.slice(0);for(var r=0,i=n.length;i>r;++r)n[r].apply(this,t)}return this},n.prototype.listeners=function(e){return this._callbacks=this._callbacks||{},this._callbacks[e]||[]},n.prototype.hasListeners=function(e){return!!this.listeners(e).length}},{}],"/Users/lucasmf/Documents/workspace-sts-3.6.3.SR1/forever-official/libexec/evaStatusService/static/node_modules/superagent/node_modules/reduce-component/index.js":[function(e,t){t.exports=function(e,t,n){for(var r=0,i=e.length,o=3==arguments.length?n:e[r++];i>r;)o=t.call(null,o,e[r],++r,e);
return o}},{}]},{},["/Users/lucasmf/Documents/workspace-sts-3.6.3.SR1/forever-official/libexec/evaStatusService/static/client-app/js/finder/index.js"]);
//# sourceMappingURL=data:application/json;base64,